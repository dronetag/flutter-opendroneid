// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package cz.dronetag.flutter_opendroneid;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Pigeon {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /** Higher priority drains battery but receives more data */
  public enum ScanPriority {
    HIGH(0),
    LOW(1);

    final int index;

    private ScanPriority(final int index) {
      this.index = index;
    }
  }

  /** ODID Message Source */
  public enum MessageSource {
    BLUETOOTH_LEGACY(0),
    BLUETOOTH_LONG_RANGE(1),
    WIFI_NAN(2),
    WIFI_BEACON(3),
    UNKNOWN(4);

    final int index;

    private MessageSource(final int index) {
      this.index = index;
    }
  }

  /** State of the Bluetooth adapter */
  public enum BluetoothState {
    UNKNOWN(0),
    RESETTING(1),
    UNSUPPORTED(2),
    UNAUTHORIZED(3),
    POWERED_OFF(4),
    POWERED_ON(5);

    final int index;

    private BluetoothState(final int index) {
      this.index = index;
    }
  }

  /** State of the Wifi adapter */
  public enum WifiState {
    DISABLING(0),
    DISABLED(1),
    ENABLING(2),
    ENABLED(3);

    final int index;

    private WifiState(final int index) {
      this.index = index;
    }
  }

  public enum BluetoothPhy {
    NONE(0),
    PHY1M(1),
    PHY2M(2),
    PHY_LECODED(3),
    UNKNOWN(4);

    final int index;

    private BluetoothPhy(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ODIDMetadata {
    private @NonNull String macAddress;

    public @NonNull String getMacAddress() {
      return macAddress;
    }

    public void setMacAddress(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"macAddress\" is null.");
      }
      this.macAddress = setterArg;
    }

    private @NonNull MessageSource source;

    public @NonNull MessageSource getSource() {
      return source;
    }

    public void setSource(@NonNull MessageSource setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"source\" is null.");
      }
      this.source = setterArg;
    }

    private @Nullable Long rssi;

    public @Nullable Long getRssi() {
      return rssi;
    }

    public void setRssi(@Nullable Long setterArg) {
      this.rssi = setterArg;
    }

    private @Nullable String btName;

    public @Nullable String getBtName() {
      return btName;
    }

    public void setBtName(@Nullable String setterArg) {
      this.btName = setterArg;
    }

    private @Nullable Long frequency;

    public @Nullable Long getFrequency() {
      return frequency;
    }

    public void setFrequency(@Nullable Long setterArg) {
      this.frequency = setterArg;
    }

    private @Nullable Long centerFreq0;

    public @Nullable Long getCenterFreq0() {
      return centerFreq0;
    }

    public void setCenterFreq0(@Nullable Long setterArg) {
      this.centerFreq0 = setterArg;
    }

    private @Nullable Long centerFreq1;

    public @Nullable Long getCenterFreq1() {
      return centerFreq1;
    }

    public void setCenterFreq1(@Nullable Long setterArg) {
      this.centerFreq1 = setterArg;
    }

    private @Nullable Long channelWidthMhz;

    public @Nullable Long getChannelWidthMhz() {
      return channelWidthMhz;
    }

    public void setChannelWidthMhz(@Nullable Long setterArg) {
      this.channelWidthMhz = setterArg;
    }

    private @Nullable BluetoothPhy primaryPhy;

    public @Nullable BluetoothPhy getPrimaryPhy() {
      return primaryPhy;
    }

    public void setPrimaryPhy(@Nullable BluetoothPhy setterArg) {
      this.primaryPhy = setterArg;
    }

    private @Nullable BluetoothPhy secondaryPhy;

    public @Nullable BluetoothPhy getSecondaryPhy() {
      return secondaryPhy;
    }

    public void setSecondaryPhy(@Nullable BluetoothPhy setterArg) {
      this.secondaryPhy = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    ODIDMetadata() {}

    public static final class Builder {

      private @Nullable String macAddress;

      public @NonNull Builder setMacAddress(@NonNull String setterArg) {
        this.macAddress = setterArg;
        return this;
      }

      private @Nullable MessageSource source;

      public @NonNull Builder setSource(@NonNull MessageSource setterArg) {
        this.source = setterArg;
        return this;
      }

      private @Nullable Long rssi;

      public @NonNull Builder setRssi(@Nullable Long setterArg) {
        this.rssi = setterArg;
        return this;
      }

      private @Nullable String btName;

      public @NonNull Builder setBtName(@Nullable String setterArg) {
        this.btName = setterArg;
        return this;
      }

      private @Nullable Long frequency;

      public @NonNull Builder setFrequency(@Nullable Long setterArg) {
        this.frequency = setterArg;
        return this;
      }

      private @Nullable Long centerFreq0;

      public @NonNull Builder setCenterFreq0(@Nullable Long setterArg) {
        this.centerFreq0 = setterArg;
        return this;
      }

      private @Nullable Long centerFreq1;

      public @NonNull Builder setCenterFreq1(@Nullable Long setterArg) {
        this.centerFreq1 = setterArg;
        return this;
      }

      private @Nullable Long channelWidthMhz;

      public @NonNull Builder setChannelWidthMhz(@Nullable Long setterArg) {
        this.channelWidthMhz = setterArg;
        return this;
      }

      private @Nullable BluetoothPhy primaryPhy;

      public @NonNull Builder setPrimaryPhy(@Nullable BluetoothPhy setterArg) {
        this.primaryPhy = setterArg;
        return this;
      }

      private @Nullable BluetoothPhy secondaryPhy;

      public @NonNull Builder setSecondaryPhy(@Nullable BluetoothPhy setterArg) {
        this.secondaryPhy = setterArg;
        return this;
      }

      public @NonNull ODIDMetadata build() {
        ODIDMetadata pigeonReturn = new ODIDMetadata();
        pigeonReturn.setMacAddress(macAddress);
        pigeonReturn.setSource(source);
        pigeonReturn.setRssi(rssi);
        pigeonReturn.setBtName(btName);
        pigeonReturn.setFrequency(frequency);
        pigeonReturn.setCenterFreq0(centerFreq0);
        pigeonReturn.setCenterFreq1(centerFreq1);
        pigeonReturn.setChannelWidthMhz(channelWidthMhz);
        pigeonReturn.setPrimaryPhy(primaryPhy);
        pigeonReturn.setSecondaryPhy(secondaryPhy);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(10);
      toListResult.add(macAddress);
      toListResult.add(source == null ? null : source.index);
      toListResult.add(rssi);
      toListResult.add(btName);
      toListResult.add(frequency);
      toListResult.add(centerFreq0);
      toListResult.add(centerFreq1);
      toListResult.add(channelWidthMhz);
      toListResult.add(primaryPhy == null ? null : primaryPhy.index);
      toListResult.add(secondaryPhy == null ? null : secondaryPhy.index);
      return toListResult;
    }

    static @NonNull ODIDMetadata fromList(@NonNull ArrayList<Object> list) {
      ODIDMetadata pigeonResult = new ODIDMetadata();
      Object macAddress = list.get(0);
      pigeonResult.setMacAddress((String) macAddress);
      Object source = list.get(1);
      pigeonResult.setSource(source == null ? null : MessageSource.values()[(int) source]);
      Object rssi = list.get(2);
      pigeonResult.setRssi((rssi == null) ? null : ((rssi instanceof Integer) ? (Integer) rssi : (Long) rssi));
      Object btName = list.get(3);
      pigeonResult.setBtName((String) btName);
      Object frequency = list.get(4);
      pigeonResult.setFrequency((frequency == null) ? null : ((frequency instanceof Integer) ? (Integer) frequency : (Long) frequency));
      Object centerFreq0 = list.get(5);
      pigeonResult.setCenterFreq0((centerFreq0 == null) ? null : ((centerFreq0 instanceof Integer) ? (Integer) centerFreq0 : (Long) centerFreq0));
      Object centerFreq1 = list.get(6);
      pigeonResult.setCenterFreq1((centerFreq1 == null) ? null : ((centerFreq1 instanceof Integer) ? (Integer) centerFreq1 : (Long) centerFreq1));
      Object channelWidthMhz = list.get(7);
      pigeonResult.setChannelWidthMhz((channelWidthMhz == null) ? null : ((channelWidthMhz instanceof Integer) ? (Integer) channelWidthMhz : (Long) channelWidthMhz));
      Object primaryPhy = list.get(8);
      pigeonResult.setPrimaryPhy(primaryPhy == null ? null : BluetoothPhy.values()[(int) primaryPhy]);
      Object secondaryPhy = list.get(9);
      pigeonResult.setSecondaryPhy(secondaryPhy == null ? null : BluetoothPhy.values()[(int) secondaryPhy]);
      return pigeonResult;
    }
  }

  /**
   * Payload send from native to dart contains raw data and metadata
   *
   * Generated class from Pigeon that represents data sent in messages.
   */
  public static final class ODIDPayload {
    private @NonNull byte[] rawData;

    public @NonNull byte[] getRawData() {
      return rawData;
    }

    public void setRawData(@NonNull byte[] setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"rawData\" is null.");
      }
      this.rawData = setterArg;
    }

    private @NonNull Long receivedTimestamp;

    public @NonNull Long getReceivedTimestamp() {
      return receivedTimestamp;
    }

    public void setReceivedTimestamp(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"receivedTimestamp\" is null.");
      }
      this.receivedTimestamp = setterArg;
    }

    private @NonNull ODIDMetadata metadata;

    public @NonNull ODIDMetadata getMetadata() {
      return metadata;
    }

    public void setMetadata(@NonNull ODIDMetadata setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"metadata\" is null.");
      }
      this.metadata = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    ODIDPayload() {}

    public static final class Builder {

      private @Nullable byte[] rawData;

      public @NonNull Builder setRawData(@NonNull byte[] setterArg) {
        this.rawData = setterArg;
        return this;
      }

      private @Nullable Long receivedTimestamp;

      public @NonNull Builder setReceivedTimestamp(@NonNull Long setterArg) {
        this.receivedTimestamp = setterArg;
        return this;
      }

      private @Nullable ODIDMetadata metadata;

      public @NonNull Builder setMetadata(@NonNull ODIDMetadata setterArg) {
        this.metadata = setterArg;
        return this;
      }

      public @NonNull ODIDPayload build() {
        ODIDPayload pigeonReturn = new ODIDPayload();
        pigeonReturn.setRawData(rawData);
        pigeonReturn.setReceivedTimestamp(receivedTimestamp);
        pigeonReturn.setMetadata(metadata);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(rawData);
      toListResult.add(receivedTimestamp);
      toListResult.add((metadata == null) ? null : metadata.toList());
      return toListResult;
    }

    static @NonNull ODIDPayload fromList(@NonNull ArrayList<Object> list) {
      ODIDPayload pigeonResult = new ODIDPayload();
      Object rawData = list.get(0);
      pigeonResult.setRawData((byte[]) rawData);
      Object receivedTimestamp = list.get(1);
      pigeonResult.setReceivedTimestamp((receivedTimestamp == null) ? null : ((receivedTimestamp instanceof Integer) ? (Integer) receivedTimestamp : (Long) receivedTimestamp));
      Object metadata = list.get(2);
      pigeonResult.setMetadata((metadata == null) ? null : ODIDMetadata.fromList((ArrayList<Object>) metadata));
      return pigeonResult;
    }
  }

  public interface Result<T> {
    @SuppressWarnings("UnknownNullness")
    void success(T result);

    void error(@NonNull Throwable error);
  }
  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface Api {

    void initialize(@NonNull Result<Void> result);

    void isInitialized(@NonNull Result<Boolean> result);

    void startScanBluetooth(@NonNull Result<Void> result);

    void startScanWifi(@NonNull Result<Void> result);

    void stopScanBluetooth(@NonNull Result<Void> result);

    void stopScanWifi(@NonNull Result<Void> result);

    void setBtScanPriority(@NonNull ScanPriority priority, @NonNull Result<Void> result);

    void isScanningBluetooth(@NonNull Result<Boolean> result);

    void isScanningWifi(@NonNull Result<Boolean> result);

    void bluetoothState(@NonNull Result<Long> result);

    void wifiState(@NonNull Result<Long> result);

    void btExtendedSupported(@NonNull Result<Boolean> result);

    void btMaxAdvDataLen(@NonNull Result<Long> result);

    void wifiNaNSupported(@NonNull Result<Boolean> result);

    /** The codec used by Api. */
    static @NonNull MessageCodec<Object> getCodec() {
      return new StandardMessageCodec();
    }
    /**Sets up an instance of `Api` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable Api api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_opendroneid.Api.initialize", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.initialize(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_opendroneid.Api.isInitialized", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Boolean> resultCallback =
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.isInitialized(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_opendroneid.Api.startScanBluetooth", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.startScanBluetooth(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_opendroneid.Api.startScanWifi", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.startScanWifi(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_opendroneid.Api.stopScanBluetooth", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.stopScanBluetooth(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_opendroneid.Api.stopScanWifi", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.stopScanWifi(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_opendroneid.Api.setBtScanPriority", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ScanPriority priorityArg = args.get(0) == null ? null : ScanPriority.values()[(int) args.get(0)];
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setBtScanPriority(priorityArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_opendroneid.Api.isScanningBluetooth", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Boolean> resultCallback =
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.isScanningBluetooth(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_opendroneid.Api.isScanningWifi", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Boolean> resultCallback =
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.isScanningWifi(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_opendroneid.Api.bluetoothState", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Long> resultCallback =
                    new Result<Long>() {
                      public void success(Long result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.bluetoothState(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_opendroneid.Api.wifiState", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Long> resultCallback =
                    new Result<Long>() {
                      public void success(Long result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.wifiState(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_opendroneid.Api.btExtendedSupported", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Boolean> resultCallback =
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.btExtendedSupported(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_opendroneid.Api.btMaxAdvDataLen", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Long> resultCallback =
                    new Result<Long>() {
                      public void success(Long result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.btMaxAdvDataLen(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_opendroneid.Api.wifiNaNSupported", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Boolean> resultCallback =
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.wifiNaNSupported(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class PayloadApiCodec extends StandardMessageCodec {
    public static final PayloadApiCodec INSTANCE = new PayloadApiCodec();

    private PayloadApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return ODIDMetadata.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return ODIDPayload.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof ODIDMetadata) {
        stream.write(128);
        writeValue(stream, ((ODIDMetadata) value).toList());
      } else if (value instanceof ODIDPayload) {
        stream.write(129);
        writeValue(stream, ((ODIDPayload) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface PayloadApi {

    @NonNull 
    ODIDPayload buildPayload(@NonNull byte[] rawData, @NonNull Long receivedTimestamp, @NonNull ODIDMetadata metadata);

    /** The codec used by PayloadApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PayloadApiCodec.INSTANCE;
    }
    /**Sets up an instance of `PayloadApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable PayloadApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_opendroneid.PayloadApi.buildPayload", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                byte[] rawDataArg = (byte[]) args.get(0);
                Number receivedTimestampArg = (Number) args.get(1);
                ODIDMetadata metadataArg = (ODIDMetadata) args.get(2);
                try {
                  ODIDPayload output = api.buildPayload(rawDataArg, (receivedTimestampArg == null) ? null : receivedTimestampArg.longValue(), metadataArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
