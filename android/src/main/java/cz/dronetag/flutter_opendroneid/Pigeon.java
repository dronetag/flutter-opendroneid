// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package cz.dronetag.flutter_opendroneid;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Pigeon {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /** ODID Message Type */
  public enum MessageType {
    BASIC_ID(0),
    LOCATION(1),
    AUTH(2),
    SELF_ID(3),
    SYSTEM(4),
    OPERATOR_ID(5),
    MESSAGE_PACK(6);

    final int index;

    private MessageType(final int index) {
      this.index = index;
    }
  }

  public enum ScanPriority {
    HIGH(0),
    LOW(1);

    final int index;

    private ScanPriority(final int index) {
      this.index = index;
    }
  }

  /** ODID Message Source */
  public enum MessageSource {
    BLUETOOTH_LEGACY(0),
    BLUETOOTH_LONG_RANGE(1),
    WIFI_NAN(2),
    WIFI_BEACON(3),
    UNKNOWN(4);

    final int index;

    private MessageSource(final int index) {
      this.index = index;
    }
  }

  /** Identification type */
  public enum IdType {
    NONE(0),
    SERIAL_NUMBER(1),
    CAA_REGISTRATION_ID(2),
    UTM_ASSIGNED_ID(3),
    SPECIFIC_SESSION_ID(4);

    final int index;

    private IdType(final int index) {
      this.index = index;
    }
  }

  /** Unmanned aircraft type */
  public enum UaType {
    NONE(0),
    AEROPLANE(1),
    HELICOPTER_OR_MULTIROTOR(2),
    GYROPLANE(3),
    HYBRID_LIFT(4),
    ORNITHOPTER(5),
    GLIDER(6),
    KITE(7),
    FREE_BALLOON(8),
    CAPTIVE_BALLOON(9),
    AIRSHIP(10),
    FREE_FALL_PARACHUTE(11),
    ROCKET(12),
    TETHERED_POWERED_AIRCRAFT(13),
    GROUND_OBSTACLE(14),
    OTHER(15);

    final int index;

    private UaType(final int index) {
      this.index = index;
    }
  }

  /** Aircraft flight status */
  public enum AircraftStatus {
    UNDECLARED(0),
    GROUND(1),
    AIRBORNE(2),
    EMERGENCY(3),
    REMOTE_ID_SYSTEM_FAILURE(4);

    final int index;

    private AircraftStatus(final int index) {
      this.index = index;
    }
  }

  /** Height value type */
  public enum HeightType {
    TAKEOFF(0),
    GROUND(1);

    final int index;

    private HeightType(final int index) {
      this.index = index;
    }
  }

  /** Horizontal accuracy */
  public enum HorizontalAccuracy {
    UNKNOWN(0),
    KILOMETERS_18_52(1),
    KILOMETERS_7_408(2),
    KILOMETERS_3_704(3),
    KILOMETERS_1_852(4),
    METERS_926(5),
    METERS_555_6(6),
    METERS_185_2(7),
    METERS_92_6(8),
    METERS_30(9),
    METERS_10(10),
    METERS_3(11),
    METERS_1(12);

    final int index;

    private HorizontalAccuracy(final int index) {
      this.index = index;
    }
  }

  /** Vertical accuracy */
  public enum VerticalAccuracy {
    UNKNOWN(0),
    METERS_150(1),
    METERS_45(2),
    METERS_25(3),
    METERS_10(4),
    METERS_3(5),
    METERS_1(6);

    final int index;

    private VerticalAccuracy(final int index) {
      this.index = index;
    }
  }

  /** Speed accuracy */
  public enum SpeedAccuracy {
    UNKNOWN(0),
    METER_PER_SECOND_10(1),
    METER_PER_SECOND_3(2),
    METER_PER_SECOND_1(3),
    METER_PER_SECOND_0_3(4);

    final int index;

    private SpeedAccuracy(final int index) {
      this.index = index;
    }
  }

  /** State of the Bluetooth adapter */
  public enum BluetoothState {
    UNKNOWN(0),
    RESETTING(1),
    UNSUPPORTED(2),
    UNAUTHORIZED(3),
    POWERED_OFF(4),
    POWERED_ON(5);

    final int index;

    private BluetoothState(final int index) {
      this.index = index;
    }
  }

  /** State of the Wifi adapter */
  public enum WifiState {
    DISABLING(0),
    DISABLED(1),
    ENABLING(2),
    ENABLED(3);

    final int index;

    private WifiState(final int index) {
      this.index = index;
    }
  }

  public enum AuthType {
    NONE(0),
    UAS_ID_SIGNATURE(1),
    OPERATOR_ID_SIGNATURE(2),
    MESSAGE_SET_SIGNATURE(3),
    NETWORK_REMOTE_ID(4),
    SPECIFIC_AUTHENTICATION(5),
    PRIVATE_USE_0X_A(6),
    PRIVATE_USE_0X_B(7),
    PRIVATE_USE_0X_C(8),
    PRIVATE_USE_0X_D(9),
    PRIVATE_USE_0X_E(10),
    PRIVATE_USE_0X_F(11);

    final int index;

    private AuthType(final int index) {
      this.index = index;
    }
  }

  public enum AircraftCategory {
    UNDECLARED(0),
    EU_OPEN(1),
    EU_SPECIFIC(2),
    EU_CERTIFIED(3);

    final int index;

    private AircraftCategory(final int index) {
      this.index = index;
    }
  }

  public enum AircraftClass {
    UNDECLARED(0),
    EU_CLASS_0(1),
    EU_CLASS_1(2),
    EU_CLASS_2(3),
    EU_CLASS_3(4),
    EU_CLASS_4(5),
    EU_CLASS_5(6),
    EU_CLASS_6(7);

    final int index;

    private AircraftClass(final int index) {
      this.index = index;
    }
  }

  public enum OperatorLocationType {
    TAKE_OFF(0),
    LIVE_GNSS(1),
    FIXED_LOCATION(2),
    INVALID(3);

    final int index;

    private OperatorLocationType(final int index) {
      this.index = index;
    }
  }

  public enum ClassificationType {
    UNDECLARED(0),
    EU(1);

    final int index;

    private ClassificationType(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class BasicIdMessage {
    private @NonNull Long receivedTimestamp;

    public @NonNull Long getReceivedTimestamp() {
      return receivedTimestamp;
    }

    public void setReceivedTimestamp(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"receivedTimestamp\" is null.");
      }
      this.receivedTimestamp = setterArg;
    }

    private @NonNull String macAddress;

    public @NonNull String getMacAddress() {
      return macAddress;
    }

    public void setMacAddress(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"macAddress\" is null.");
      }
      this.macAddress = setterArg;
    }

    private @Nullable MessageSource source;

    public @Nullable MessageSource getSource() {
      return source;
    }

    public void setSource(@Nullable MessageSource setterArg) {
      this.source = setterArg;
    }

    private @Nullable Long rssi;

    public @Nullable Long getRssi() {
      return rssi;
    }

    public void setRssi(@Nullable Long setterArg) {
      this.rssi = setterArg;
    }

    /**
     * The primary identifier of UAS
     * (Dronetag devices use their serial number as their UAS ID)
     */
    private @NonNull String uasId;

    public @NonNull String getUasId() {
      return uasId;
    }

    public void setUasId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"uasId\" is null.");
      }
      this.uasId = setterArg;
    }

    /** Identification type */
    private @Nullable IdType idType;

    public @Nullable IdType getIdType() {
      return idType;
    }

    public void setIdType(@Nullable IdType setterArg) {
      this.idType = setterArg;
    }

    /** Type of the aircraft */
    private @Nullable UaType uaType;

    public @Nullable UaType getUaType() {
      return uaType;
    }

    public void setUaType(@Nullable UaType setterArg) {
      this.uaType = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    BasicIdMessage() {}

    public static final class Builder {

      private @Nullable Long receivedTimestamp;

      public @NonNull Builder setReceivedTimestamp(@NonNull Long setterArg) {
        this.receivedTimestamp = setterArg;
        return this;
      }

      private @Nullable String macAddress;

      public @NonNull Builder setMacAddress(@NonNull String setterArg) {
        this.macAddress = setterArg;
        return this;
      }

      private @Nullable MessageSource source;

      public @NonNull Builder setSource(@Nullable MessageSource setterArg) {
        this.source = setterArg;
        return this;
      }

      private @Nullable Long rssi;

      public @NonNull Builder setRssi(@Nullable Long setterArg) {
        this.rssi = setterArg;
        return this;
      }

      private @Nullable String uasId;

      public @NonNull Builder setUasId(@NonNull String setterArg) {
        this.uasId = setterArg;
        return this;
      }

      private @Nullable IdType idType;

      public @NonNull Builder setIdType(@Nullable IdType setterArg) {
        this.idType = setterArg;
        return this;
      }

      private @Nullable UaType uaType;

      public @NonNull Builder setUaType(@Nullable UaType setterArg) {
        this.uaType = setterArg;
        return this;
      }

      public @NonNull BasicIdMessage build() {
        BasicIdMessage pigeonReturn = new BasicIdMessage();
        pigeonReturn.setReceivedTimestamp(receivedTimestamp);
        pigeonReturn.setMacAddress(macAddress);
        pigeonReturn.setSource(source);
        pigeonReturn.setRssi(rssi);
        pigeonReturn.setUasId(uasId);
        pigeonReturn.setIdType(idType);
        pigeonReturn.setUaType(uaType);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(7);
      toListResult.add(receivedTimestamp);
      toListResult.add(macAddress);
      toListResult.add(source == null ? null : source.index);
      toListResult.add(rssi);
      toListResult.add(uasId);
      toListResult.add(idType == null ? null : idType.index);
      toListResult.add(uaType == null ? null : uaType.index);
      return toListResult;
    }

    static @NonNull BasicIdMessage fromList(@NonNull ArrayList<Object> list) {
      BasicIdMessage pigeonResult = new BasicIdMessage();
      Object receivedTimestamp = list.get(0);
      pigeonResult.setReceivedTimestamp((receivedTimestamp == null) ? null : ((receivedTimestamp instanceof Integer) ? (Integer) receivedTimestamp : (Long) receivedTimestamp));
      Object macAddress = list.get(1);
      pigeonResult.setMacAddress((String) macAddress);
      Object source = list.get(2);
      pigeonResult.setSource(source == null ? null : MessageSource.values()[(int) source]);
      Object rssi = list.get(3);
      pigeonResult.setRssi((rssi == null) ? null : ((rssi instanceof Integer) ? (Integer) rssi : (Long) rssi));
      Object uasId = list.get(4);
      pigeonResult.setUasId((String) uasId);
      Object idType = list.get(5);
      pigeonResult.setIdType(idType == null ? null : IdType.values()[(int) idType]);
      Object uaType = list.get(6);
      pigeonResult.setUaType(uaType == null ? null : UaType.values()[(int) uaType]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class LocationMessage {
    private @NonNull Long receivedTimestamp;

    public @NonNull Long getReceivedTimestamp() {
      return receivedTimestamp;
    }

    public void setReceivedTimestamp(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"receivedTimestamp\" is null.");
      }
      this.receivedTimestamp = setterArg;
    }

    private @NonNull String macAddress;

    public @NonNull String getMacAddress() {
      return macAddress;
    }

    public void setMacAddress(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"macAddress\" is null.");
      }
      this.macAddress = setterArg;
    }

    private @Nullable MessageSource source;

    public @Nullable MessageSource getSource() {
      return source;
    }

    public void setSource(@Nullable MessageSource setterArg) {
      this.source = setterArg;
    }

    private @Nullable Long rssi;

    public @Nullable Long getRssi() {
      return rssi;
    }

    public void setRssi(@Nullable Long setterArg) {
      this.rssi = setterArg;
    }

    /** The reported current status of the aircraft */
    private @Nullable AircraftStatus status;

    public @Nullable AircraftStatus getStatus() {
      return status;
    }

    public void setStatus(@Nullable AircraftStatus setterArg) {
      this.status = setterArg;
    }

    /**
     * The type of reported height
     *
     * (The default type is takeoff height)
     */
    private @Nullable HeightType heightType;

    public @Nullable HeightType getHeightType() {
      return heightType;
    }

    public void setHeightType(@Nullable HeightType setterArg) {
      this.heightType = setterArg;
    }

    /** Direction of the aircraft heading (in degrees) */
    private @Nullable Double direction;

    public @Nullable Double getDirection() {
      return direction;
    }

    public void setDirection(@Nullable Double setterArg) {
      this.direction = setterArg;
    }

    /** Horizontal speed of the aircraft */
    private @Nullable Double speedHorizontal;

    public @Nullable Double getSpeedHorizontal() {
      return speedHorizontal;
    }

    public void setSpeedHorizontal(@Nullable Double setterArg) {
      this.speedHorizontal = setterArg;
    }

    /** Vertical speed of the aircraft */
    private @Nullable Double speedVertical;

    public @Nullable Double getSpeedVertical() {
      return speedVertical;
    }

    public void setSpeedVertical(@Nullable Double setterArg) {
      this.speedVertical = setterArg;
    }

    /** Location latitude of the aircraft */
    private @Nullable Double latitude;

    public @Nullable Double getLatitude() {
      return latitude;
    }

    public void setLatitude(@Nullable Double setterArg) {
      this.latitude = setterArg;
    }

    /** Location longitude of the aircraft */
    private @Nullable Double longitude;

    public @Nullable Double getLongitude() {
      return longitude;
    }

    public void setLongitude(@Nullable Double setterArg) {
      this.longitude = setterArg;
    }

    /** Altitude calculcated from barometric pressure (in meters) */
    private @Nullable Double altitudePressure;

    public @Nullable Double getAltitudePressure() {
      return altitudePressure;
    }

    public void setAltitudePressure(@Nullable Double setterArg) {
      this.altitudePressure = setterArg;
    }

    /** Altitude calculated from GNSS data (in meters) */
    private @Nullable Double altitudeGeodetic;

    public @Nullable Double getAltitudeGeodetic() {
      return altitudeGeodetic;
    }

    public void setAltitudeGeodetic(@Nullable Double setterArg) {
      this.altitudeGeodetic = setterArg;
    }

    /** Current height of the aircraft */
    private @Nullable Double height;

    public @Nullable Double getHeight() {
      return height;
    }

    public void setHeight(@Nullable Double setterArg) {
      this.height = setterArg;
    }

    /** Horizontal accuracy of reported position via GNSS */
    private @Nullable HorizontalAccuracy horizontalAccuracy;

    public @Nullable HorizontalAccuracy getHorizontalAccuracy() {
      return horizontalAccuracy;
    }

    public void setHorizontalAccuracy(@Nullable HorizontalAccuracy setterArg) {
      this.horizontalAccuracy = setterArg;
    }

    /** Vertical accuracy of reported altitude via GNSS */
    private @Nullable VerticalAccuracy verticalAccuracy;

    public @Nullable VerticalAccuracy getVerticalAccuracy() {
      return verticalAccuracy;
    }

    public void setVerticalAccuracy(@Nullable VerticalAccuracy setterArg) {
      this.verticalAccuracy = setterArg;
    }

    /** Vertical accuracy of reported altitude via barometric pressure */
    private @Nullable VerticalAccuracy baroAccuracy;

    public @Nullable VerticalAccuracy getBaroAccuracy() {
      return baroAccuracy;
    }

    public void setBaroAccuracy(@Nullable VerticalAccuracy setterArg) {
      this.baroAccuracy = setterArg;
    }

    /** Speed accuracy of reported position via GNSS */
    private @Nullable SpeedAccuracy speedAccuracy;

    public @Nullable SpeedAccuracy getSpeedAccuracy() {
      return speedAccuracy;
    }

    public void setSpeedAccuracy(@Nullable SpeedAccuracy setterArg) {
      this.speedAccuracy = setterArg;
    }

    /** Time of the location report */
    private @Nullable Long time;

    public @Nullable Long getTime() {
      return time;
    }

    public void setTime(@Nullable Long setterArg) {
      this.time = setterArg;
    }

    /** Accuracy of timestamp values */
    private @Nullable Double timeAccuracy;

    public @Nullable Double getTimeAccuracy() {
      return timeAccuracy;
    }

    public void setTimeAccuracy(@Nullable Double setterArg) {
      this.timeAccuracy = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    LocationMessage() {}

    public static final class Builder {

      private @Nullable Long receivedTimestamp;

      public @NonNull Builder setReceivedTimestamp(@NonNull Long setterArg) {
        this.receivedTimestamp = setterArg;
        return this;
      }

      private @Nullable String macAddress;

      public @NonNull Builder setMacAddress(@NonNull String setterArg) {
        this.macAddress = setterArg;
        return this;
      }

      private @Nullable MessageSource source;

      public @NonNull Builder setSource(@Nullable MessageSource setterArg) {
        this.source = setterArg;
        return this;
      }

      private @Nullable Long rssi;

      public @NonNull Builder setRssi(@Nullable Long setterArg) {
        this.rssi = setterArg;
        return this;
      }

      private @Nullable AircraftStatus status;

      public @NonNull Builder setStatus(@Nullable AircraftStatus setterArg) {
        this.status = setterArg;
        return this;
      }

      private @Nullable HeightType heightType;

      public @NonNull Builder setHeightType(@Nullable HeightType setterArg) {
        this.heightType = setterArg;
        return this;
      }

      private @Nullable Double direction;

      public @NonNull Builder setDirection(@Nullable Double setterArg) {
        this.direction = setterArg;
        return this;
      }

      private @Nullable Double speedHorizontal;

      public @NonNull Builder setSpeedHorizontal(@Nullable Double setterArg) {
        this.speedHorizontal = setterArg;
        return this;
      }

      private @Nullable Double speedVertical;

      public @NonNull Builder setSpeedVertical(@Nullable Double setterArg) {
        this.speedVertical = setterArg;
        return this;
      }

      private @Nullable Double latitude;

      public @NonNull Builder setLatitude(@Nullable Double setterArg) {
        this.latitude = setterArg;
        return this;
      }

      private @Nullable Double longitude;

      public @NonNull Builder setLongitude(@Nullable Double setterArg) {
        this.longitude = setterArg;
        return this;
      }

      private @Nullable Double altitudePressure;

      public @NonNull Builder setAltitudePressure(@Nullable Double setterArg) {
        this.altitudePressure = setterArg;
        return this;
      }

      private @Nullable Double altitudeGeodetic;

      public @NonNull Builder setAltitudeGeodetic(@Nullable Double setterArg) {
        this.altitudeGeodetic = setterArg;
        return this;
      }

      private @Nullable Double height;

      public @NonNull Builder setHeight(@Nullable Double setterArg) {
        this.height = setterArg;
        return this;
      }

      private @Nullable HorizontalAccuracy horizontalAccuracy;

      public @NonNull Builder setHorizontalAccuracy(@Nullable HorizontalAccuracy setterArg) {
        this.horizontalAccuracy = setterArg;
        return this;
      }

      private @Nullable VerticalAccuracy verticalAccuracy;

      public @NonNull Builder setVerticalAccuracy(@Nullable VerticalAccuracy setterArg) {
        this.verticalAccuracy = setterArg;
        return this;
      }

      private @Nullable VerticalAccuracy baroAccuracy;

      public @NonNull Builder setBaroAccuracy(@Nullable VerticalAccuracy setterArg) {
        this.baroAccuracy = setterArg;
        return this;
      }

      private @Nullable SpeedAccuracy speedAccuracy;

      public @NonNull Builder setSpeedAccuracy(@Nullable SpeedAccuracy setterArg) {
        this.speedAccuracy = setterArg;
        return this;
      }

      private @Nullable Long time;

      public @NonNull Builder setTime(@Nullable Long setterArg) {
        this.time = setterArg;
        return this;
      }

      private @Nullable Double timeAccuracy;

      public @NonNull Builder setTimeAccuracy(@Nullable Double setterArg) {
        this.timeAccuracy = setterArg;
        return this;
      }

      public @NonNull LocationMessage build() {
        LocationMessage pigeonReturn = new LocationMessage();
        pigeonReturn.setReceivedTimestamp(receivedTimestamp);
        pigeonReturn.setMacAddress(macAddress);
        pigeonReturn.setSource(source);
        pigeonReturn.setRssi(rssi);
        pigeonReturn.setStatus(status);
        pigeonReturn.setHeightType(heightType);
        pigeonReturn.setDirection(direction);
        pigeonReturn.setSpeedHorizontal(speedHorizontal);
        pigeonReturn.setSpeedVertical(speedVertical);
        pigeonReturn.setLatitude(latitude);
        pigeonReturn.setLongitude(longitude);
        pigeonReturn.setAltitudePressure(altitudePressure);
        pigeonReturn.setAltitudeGeodetic(altitudeGeodetic);
        pigeonReturn.setHeight(height);
        pigeonReturn.setHorizontalAccuracy(horizontalAccuracy);
        pigeonReturn.setVerticalAccuracy(verticalAccuracy);
        pigeonReturn.setBaroAccuracy(baroAccuracy);
        pigeonReturn.setSpeedAccuracy(speedAccuracy);
        pigeonReturn.setTime(time);
        pigeonReturn.setTimeAccuracy(timeAccuracy);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(20);
      toListResult.add(receivedTimestamp);
      toListResult.add(macAddress);
      toListResult.add(source == null ? null : source.index);
      toListResult.add(rssi);
      toListResult.add(status == null ? null : status.index);
      toListResult.add(heightType == null ? null : heightType.index);
      toListResult.add(direction);
      toListResult.add(speedHorizontal);
      toListResult.add(speedVertical);
      toListResult.add(latitude);
      toListResult.add(longitude);
      toListResult.add(altitudePressure);
      toListResult.add(altitudeGeodetic);
      toListResult.add(height);
      toListResult.add(horizontalAccuracy == null ? null : horizontalAccuracy.index);
      toListResult.add(verticalAccuracy == null ? null : verticalAccuracy.index);
      toListResult.add(baroAccuracy == null ? null : baroAccuracy.index);
      toListResult.add(speedAccuracy == null ? null : speedAccuracy.index);
      toListResult.add(time);
      toListResult.add(timeAccuracy);
      return toListResult;
    }

    static @NonNull LocationMessage fromList(@NonNull ArrayList<Object> list) {
      LocationMessage pigeonResult = new LocationMessage();
      Object receivedTimestamp = list.get(0);
      pigeonResult.setReceivedTimestamp((receivedTimestamp == null) ? null : ((receivedTimestamp instanceof Integer) ? (Integer) receivedTimestamp : (Long) receivedTimestamp));
      Object macAddress = list.get(1);
      pigeonResult.setMacAddress((String) macAddress);
      Object source = list.get(2);
      pigeonResult.setSource(source == null ? null : MessageSource.values()[(int) source]);
      Object rssi = list.get(3);
      pigeonResult.setRssi((rssi == null) ? null : ((rssi instanceof Integer) ? (Integer) rssi : (Long) rssi));
      Object status = list.get(4);
      pigeonResult.setStatus(status == null ? null : AircraftStatus.values()[(int) status]);
      Object heightType = list.get(5);
      pigeonResult.setHeightType(heightType == null ? null : HeightType.values()[(int) heightType]);
      Object direction = list.get(6);
      pigeonResult.setDirection((Double) direction);
      Object speedHorizontal = list.get(7);
      pigeonResult.setSpeedHorizontal((Double) speedHorizontal);
      Object speedVertical = list.get(8);
      pigeonResult.setSpeedVertical((Double) speedVertical);
      Object latitude = list.get(9);
      pigeonResult.setLatitude((Double) latitude);
      Object longitude = list.get(10);
      pigeonResult.setLongitude((Double) longitude);
      Object altitudePressure = list.get(11);
      pigeonResult.setAltitudePressure((Double) altitudePressure);
      Object altitudeGeodetic = list.get(12);
      pigeonResult.setAltitudeGeodetic((Double) altitudeGeodetic);
      Object height = list.get(13);
      pigeonResult.setHeight((Double) height);
      Object horizontalAccuracy = list.get(14);
      pigeonResult.setHorizontalAccuracy(horizontalAccuracy == null ? null : HorizontalAccuracy.values()[(int) horizontalAccuracy]);
      Object verticalAccuracy = list.get(15);
      pigeonResult.setVerticalAccuracy(verticalAccuracy == null ? null : VerticalAccuracy.values()[(int) verticalAccuracy]);
      Object baroAccuracy = list.get(16);
      pigeonResult.setBaroAccuracy(baroAccuracy == null ? null : VerticalAccuracy.values()[(int) baroAccuracy]);
      Object speedAccuracy = list.get(17);
      pigeonResult.setSpeedAccuracy(speedAccuracy == null ? null : SpeedAccuracy.values()[(int) speedAccuracy]);
      Object time = list.get(18);
      pigeonResult.setTime((time == null) ? null : ((time instanceof Integer) ? (Integer) time : (Long) time));
      Object timeAccuracy = list.get(19);
      pigeonResult.setTimeAccuracy((Double) timeAccuracy);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class OperatorIdMessage {
    /** Operator ID */
    private @NonNull Long receivedTimestamp;

    public @NonNull Long getReceivedTimestamp() {
      return receivedTimestamp;
    }

    public void setReceivedTimestamp(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"receivedTimestamp\" is null.");
      }
      this.receivedTimestamp = setterArg;
    }

    private @NonNull String macAddress;

    public @NonNull String getMacAddress() {
      return macAddress;
    }

    public void setMacAddress(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"macAddress\" is null.");
      }
      this.macAddress = setterArg;
    }

    private @Nullable MessageSource source;

    public @Nullable MessageSource getSource() {
      return source;
    }

    public void setSource(@Nullable MessageSource setterArg) {
      this.source = setterArg;
    }

    private @Nullable Long rssi;

    public @Nullable Long getRssi() {
      return rssi;
    }

    public void setRssi(@Nullable Long setterArg) {
      this.rssi = setterArg;
    }

    private @NonNull String operatorId;

    public @NonNull String getOperatorId() {
      return operatorId;
    }

    public void setOperatorId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"operatorId\" is null.");
      }
      this.operatorId = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    OperatorIdMessage() {}

    public static final class Builder {

      private @Nullable Long receivedTimestamp;

      public @NonNull Builder setReceivedTimestamp(@NonNull Long setterArg) {
        this.receivedTimestamp = setterArg;
        return this;
      }

      private @Nullable String macAddress;

      public @NonNull Builder setMacAddress(@NonNull String setterArg) {
        this.macAddress = setterArg;
        return this;
      }

      private @Nullable MessageSource source;

      public @NonNull Builder setSource(@Nullable MessageSource setterArg) {
        this.source = setterArg;
        return this;
      }

      private @Nullable Long rssi;

      public @NonNull Builder setRssi(@Nullable Long setterArg) {
        this.rssi = setterArg;
        return this;
      }

      private @Nullable String operatorId;

      public @NonNull Builder setOperatorId(@NonNull String setterArg) {
        this.operatorId = setterArg;
        return this;
      }

      public @NonNull OperatorIdMessage build() {
        OperatorIdMessage pigeonReturn = new OperatorIdMessage();
        pigeonReturn.setReceivedTimestamp(receivedTimestamp);
        pigeonReturn.setMacAddress(macAddress);
        pigeonReturn.setSource(source);
        pigeonReturn.setRssi(rssi);
        pigeonReturn.setOperatorId(operatorId);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(receivedTimestamp);
      toListResult.add(macAddress);
      toListResult.add(source == null ? null : source.index);
      toListResult.add(rssi);
      toListResult.add(operatorId);
      return toListResult;
    }

    static @NonNull OperatorIdMessage fromList(@NonNull ArrayList<Object> list) {
      OperatorIdMessage pigeonResult = new OperatorIdMessage();
      Object receivedTimestamp = list.get(0);
      pigeonResult.setReceivedTimestamp((receivedTimestamp == null) ? null : ((receivedTimestamp instanceof Integer) ? (Integer) receivedTimestamp : (Long) receivedTimestamp));
      Object macAddress = list.get(1);
      pigeonResult.setMacAddress((String) macAddress);
      Object source = list.get(2);
      pigeonResult.setSource(source == null ? null : MessageSource.values()[(int) source]);
      Object rssi = list.get(3);
      pigeonResult.setRssi((rssi == null) ? null : ((rssi instanceof Integer) ? (Integer) rssi : (Long) rssi));
      Object operatorId = list.get(4);
      pigeonResult.setOperatorId((String) operatorId);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class AuthenticationMessage {
    private @NonNull Long receivedTimestamp;

    public @NonNull Long getReceivedTimestamp() {
      return receivedTimestamp;
    }

    public void setReceivedTimestamp(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"receivedTimestamp\" is null.");
      }
      this.receivedTimestamp = setterArg;
    }

    private @NonNull String macAddress;

    public @NonNull String getMacAddress() {
      return macAddress;
    }

    public void setMacAddress(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"macAddress\" is null.");
      }
      this.macAddress = setterArg;
    }

    private @Nullable MessageSource source;

    public @Nullable MessageSource getSource() {
      return source;
    }

    public void setSource(@Nullable MessageSource setterArg) {
      this.source = setterArg;
    }

    private @Nullable Long rssi;

    public @Nullable Long getRssi() {
      return rssi;
    }

    public void setRssi(@Nullable Long setterArg) {
      this.rssi = setterArg;
    }

    private @Nullable AuthType authType;

    public @Nullable AuthType getAuthType() {
      return authType;
    }

    public void setAuthType(@Nullable AuthType setterArg) {
      this.authType = setterArg;
    }

    private @NonNull Long authDataPage;

    public @NonNull Long getAuthDataPage() {
      return authDataPage;
    }

    public void setAuthDataPage(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"authDataPage\" is null.");
      }
      this.authDataPage = setterArg;
    }

    private @NonNull Long authLastPageIndex;

    public @NonNull Long getAuthLastPageIndex() {
      return authLastPageIndex;
    }

    public void setAuthLastPageIndex(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"authLastPageIndex\" is null.");
      }
      this.authLastPageIndex = setterArg;
    }

    private @NonNull Long authLength;

    public @NonNull Long getAuthLength() {
      return authLength;
    }

    public void setAuthLength(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"authLength\" is null.");
      }
      this.authLength = setterArg;
    }

    private @NonNull Long authTimestamp;

    public @NonNull Long getAuthTimestamp() {
      return authTimestamp;
    }

    public void setAuthTimestamp(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"authTimestamp\" is null.");
      }
      this.authTimestamp = setterArg;
    }

    private @NonNull String authData;

    public @NonNull String getAuthData() {
      return authData;
    }

    public void setAuthData(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"authData\" is null.");
      }
      this.authData = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    AuthenticationMessage() {}

    public static final class Builder {

      private @Nullable Long receivedTimestamp;

      public @NonNull Builder setReceivedTimestamp(@NonNull Long setterArg) {
        this.receivedTimestamp = setterArg;
        return this;
      }

      private @Nullable String macAddress;

      public @NonNull Builder setMacAddress(@NonNull String setterArg) {
        this.macAddress = setterArg;
        return this;
      }

      private @Nullable MessageSource source;

      public @NonNull Builder setSource(@Nullable MessageSource setterArg) {
        this.source = setterArg;
        return this;
      }

      private @Nullable Long rssi;

      public @NonNull Builder setRssi(@Nullable Long setterArg) {
        this.rssi = setterArg;
        return this;
      }

      private @Nullable AuthType authType;

      public @NonNull Builder setAuthType(@Nullable AuthType setterArg) {
        this.authType = setterArg;
        return this;
      }

      private @Nullable Long authDataPage;

      public @NonNull Builder setAuthDataPage(@NonNull Long setterArg) {
        this.authDataPage = setterArg;
        return this;
      }

      private @Nullable Long authLastPageIndex;

      public @NonNull Builder setAuthLastPageIndex(@NonNull Long setterArg) {
        this.authLastPageIndex = setterArg;
        return this;
      }

      private @Nullable Long authLength;

      public @NonNull Builder setAuthLength(@NonNull Long setterArg) {
        this.authLength = setterArg;
        return this;
      }

      private @Nullable Long authTimestamp;

      public @NonNull Builder setAuthTimestamp(@NonNull Long setterArg) {
        this.authTimestamp = setterArg;
        return this;
      }

      private @Nullable String authData;

      public @NonNull Builder setAuthData(@NonNull String setterArg) {
        this.authData = setterArg;
        return this;
      }

      public @NonNull AuthenticationMessage build() {
        AuthenticationMessage pigeonReturn = new AuthenticationMessage();
        pigeonReturn.setReceivedTimestamp(receivedTimestamp);
        pigeonReturn.setMacAddress(macAddress);
        pigeonReturn.setSource(source);
        pigeonReturn.setRssi(rssi);
        pigeonReturn.setAuthType(authType);
        pigeonReturn.setAuthDataPage(authDataPage);
        pigeonReturn.setAuthLastPageIndex(authLastPageIndex);
        pigeonReturn.setAuthLength(authLength);
        pigeonReturn.setAuthTimestamp(authTimestamp);
        pigeonReturn.setAuthData(authData);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(10);
      toListResult.add(receivedTimestamp);
      toListResult.add(macAddress);
      toListResult.add(source == null ? null : source.index);
      toListResult.add(rssi);
      toListResult.add(authType == null ? null : authType.index);
      toListResult.add(authDataPage);
      toListResult.add(authLastPageIndex);
      toListResult.add(authLength);
      toListResult.add(authTimestamp);
      toListResult.add(authData);
      return toListResult;
    }

    static @NonNull AuthenticationMessage fromList(@NonNull ArrayList<Object> list) {
      AuthenticationMessage pigeonResult = new AuthenticationMessage();
      Object receivedTimestamp = list.get(0);
      pigeonResult.setReceivedTimestamp((receivedTimestamp == null) ? null : ((receivedTimestamp instanceof Integer) ? (Integer) receivedTimestamp : (Long) receivedTimestamp));
      Object macAddress = list.get(1);
      pigeonResult.setMacAddress((String) macAddress);
      Object source = list.get(2);
      pigeonResult.setSource(source == null ? null : MessageSource.values()[(int) source]);
      Object rssi = list.get(3);
      pigeonResult.setRssi((rssi == null) ? null : ((rssi instanceof Integer) ? (Integer) rssi : (Long) rssi));
      Object authType = list.get(4);
      pigeonResult.setAuthType(authType == null ? null : AuthType.values()[(int) authType]);
      Object authDataPage = list.get(5);
      pigeonResult.setAuthDataPage((authDataPage == null) ? null : ((authDataPage instanceof Integer) ? (Integer) authDataPage : (Long) authDataPage));
      Object authLastPageIndex = list.get(6);
      pigeonResult.setAuthLastPageIndex((authLastPageIndex == null) ? null : ((authLastPageIndex instanceof Integer) ? (Integer) authLastPageIndex : (Long) authLastPageIndex));
      Object authLength = list.get(7);
      pigeonResult.setAuthLength((authLength == null) ? null : ((authLength instanceof Integer) ? (Integer) authLength : (Long) authLength));
      Object authTimestamp = list.get(8);
      pigeonResult.setAuthTimestamp((authTimestamp == null) ? null : ((authTimestamp instanceof Integer) ? (Integer) authTimestamp : (Long) authTimestamp));
      Object authData = list.get(9);
      pigeonResult.setAuthData((String) authData);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class SelfIdMessage {
    private @NonNull Long receivedTimestamp;

    public @NonNull Long getReceivedTimestamp() {
      return receivedTimestamp;
    }

    public void setReceivedTimestamp(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"receivedTimestamp\" is null.");
      }
      this.receivedTimestamp = setterArg;
    }

    private @NonNull String macAddress;

    public @NonNull String getMacAddress() {
      return macAddress;
    }

    public void setMacAddress(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"macAddress\" is null.");
      }
      this.macAddress = setterArg;
    }

    private @Nullable MessageSource source;

    public @Nullable MessageSource getSource() {
      return source;
    }

    public void setSource(@Nullable MessageSource setterArg) {
      this.source = setterArg;
    }

    private @Nullable Long rssi;

    public @Nullable Long getRssi() {
      return rssi;
    }

    public void setRssi(@Nullable Long setterArg) {
      this.rssi = setterArg;
    }

    private @NonNull Long descriptionType;

    public @NonNull Long getDescriptionType() {
      return descriptionType;
    }

    public void setDescriptionType(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"descriptionType\" is null.");
      }
      this.descriptionType = setterArg;
    }

    private @NonNull String operationDescription;

    public @NonNull String getOperationDescription() {
      return operationDescription;
    }

    public void setOperationDescription(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"operationDescription\" is null.");
      }
      this.operationDescription = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    SelfIdMessage() {}

    public static final class Builder {

      private @Nullable Long receivedTimestamp;

      public @NonNull Builder setReceivedTimestamp(@NonNull Long setterArg) {
        this.receivedTimestamp = setterArg;
        return this;
      }

      private @Nullable String macAddress;

      public @NonNull Builder setMacAddress(@NonNull String setterArg) {
        this.macAddress = setterArg;
        return this;
      }

      private @Nullable MessageSource source;

      public @NonNull Builder setSource(@Nullable MessageSource setterArg) {
        this.source = setterArg;
        return this;
      }

      private @Nullable Long rssi;

      public @NonNull Builder setRssi(@Nullable Long setterArg) {
        this.rssi = setterArg;
        return this;
      }

      private @Nullable Long descriptionType;

      public @NonNull Builder setDescriptionType(@NonNull Long setterArg) {
        this.descriptionType = setterArg;
        return this;
      }

      private @Nullable String operationDescription;

      public @NonNull Builder setOperationDescription(@NonNull String setterArg) {
        this.operationDescription = setterArg;
        return this;
      }

      public @NonNull SelfIdMessage build() {
        SelfIdMessage pigeonReturn = new SelfIdMessage();
        pigeonReturn.setReceivedTimestamp(receivedTimestamp);
        pigeonReturn.setMacAddress(macAddress);
        pigeonReturn.setSource(source);
        pigeonReturn.setRssi(rssi);
        pigeonReturn.setDescriptionType(descriptionType);
        pigeonReturn.setOperationDescription(operationDescription);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(6);
      toListResult.add(receivedTimestamp);
      toListResult.add(macAddress);
      toListResult.add(source == null ? null : source.index);
      toListResult.add(rssi);
      toListResult.add(descriptionType);
      toListResult.add(operationDescription);
      return toListResult;
    }

    static @NonNull SelfIdMessage fromList(@NonNull ArrayList<Object> list) {
      SelfIdMessage pigeonResult = new SelfIdMessage();
      Object receivedTimestamp = list.get(0);
      pigeonResult.setReceivedTimestamp((receivedTimestamp == null) ? null : ((receivedTimestamp instanceof Integer) ? (Integer) receivedTimestamp : (Long) receivedTimestamp));
      Object macAddress = list.get(1);
      pigeonResult.setMacAddress((String) macAddress);
      Object source = list.get(2);
      pigeonResult.setSource(source == null ? null : MessageSource.values()[(int) source]);
      Object rssi = list.get(3);
      pigeonResult.setRssi((rssi == null) ? null : ((rssi instanceof Integer) ? (Integer) rssi : (Long) rssi));
      Object descriptionType = list.get(4);
      pigeonResult.setDescriptionType((descriptionType == null) ? null : ((descriptionType instanceof Integer) ? (Integer) descriptionType : (Long) descriptionType));
      Object operationDescription = list.get(5);
      pigeonResult.setOperationDescription((String) operationDescription);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class SystemDataMessage {
    private @NonNull Long receivedTimestamp;

    public @NonNull Long getReceivedTimestamp() {
      return receivedTimestamp;
    }

    public void setReceivedTimestamp(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"receivedTimestamp\" is null.");
      }
      this.receivedTimestamp = setterArg;
    }

    private @NonNull String macAddress;

    public @NonNull String getMacAddress() {
      return macAddress;
    }

    public void setMacAddress(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"macAddress\" is null.");
      }
      this.macAddress = setterArg;
    }

    private @Nullable MessageSource source;

    public @Nullable MessageSource getSource() {
      return source;
    }

    public void setSource(@Nullable MessageSource setterArg) {
      this.source = setterArg;
    }

    private @Nullable Long rssi;

    public @Nullable Long getRssi() {
      return rssi;
    }

    public void setRssi(@Nullable Long setterArg) {
      this.rssi = setterArg;
    }

    private @Nullable OperatorLocationType operatorLocationType;

    public @Nullable OperatorLocationType getOperatorLocationType() {
      return operatorLocationType;
    }

    public void setOperatorLocationType(@Nullable OperatorLocationType setterArg) {
      this.operatorLocationType = setterArg;
    }

    private @Nullable ClassificationType classificationType;

    public @Nullable ClassificationType getClassificationType() {
      return classificationType;
    }

    public void setClassificationType(@Nullable ClassificationType setterArg) {
      this.classificationType = setterArg;
    }

    private @NonNull Double operatorLatitude;

    public @NonNull Double getOperatorLatitude() {
      return operatorLatitude;
    }

    public void setOperatorLatitude(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"operatorLatitude\" is null.");
      }
      this.operatorLatitude = setterArg;
    }

    private @NonNull Double operatorLongitude;

    public @NonNull Double getOperatorLongitude() {
      return operatorLongitude;
    }

    public void setOperatorLongitude(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"operatorLongitude\" is null.");
      }
      this.operatorLongitude = setterArg;
    }

    private @NonNull Long areaCount;

    public @NonNull Long getAreaCount() {
      return areaCount;
    }

    public void setAreaCount(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"areaCount\" is null.");
      }
      this.areaCount = setterArg;
    }

    private @NonNull Long areaRadius;

    public @NonNull Long getAreaRadius() {
      return areaRadius;
    }

    public void setAreaRadius(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"areaRadius\" is null.");
      }
      this.areaRadius = setterArg;
    }

    private @NonNull Double areaCeiling;

    public @NonNull Double getAreaCeiling() {
      return areaCeiling;
    }

    public void setAreaCeiling(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"areaCeiling\" is null.");
      }
      this.areaCeiling = setterArg;
    }

    private @NonNull Double areaFloor;

    public @NonNull Double getAreaFloor() {
      return areaFloor;
    }

    public void setAreaFloor(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"areaFloor\" is null.");
      }
      this.areaFloor = setterArg;
    }

    private @Nullable AircraftCategory category;

    public @Nullable AircraftCategory getCategory() {
      return category;
    }

    public void setCategory(@Nullable AircraftCategory setterArg) {
      this.category = setterArg;
    }

    private @Nullable AircraftClass classValue;

    public @Nullable AircraftClass getClassValue() {
      return classValue;
    }

    public void setClassValue(@Nullable AircraftClass setterArg) {
      this.classValue = setterArg;
    }

    private @NonNull Double operatorAltitudeGeo;

    public @NonNull Double getOperatorAltitudeGeo() {
      return operatorAltitudeGeo;
    }

    public void setOperatorAltitudeGeo(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"operatorAltitudeGeo\" is null.");
      }
      this.operatorAltitudeGeo = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    SystemDataMessage() {}

    public static final class Builder {

      private @Nullable Long receivedTimestamp;

      public @NonNull Builder setReceivedTimestamp(@NonNull Long setterArg) {
        this.receivedTimestamp = setterArg;
        return this;
      }

      private @Nullable String macAddress;

      public @NonNull Builder setMacAddress(@NonNull String setterArg) {
        this.macAddress = setterArg;
        return this;
      }

      private @Nullable MessageSource source;

      public @NonNull Builder setSource(@Nullable MessageSource setterArg) {
        this.source = setterArg;
        return this;
      }

      private @Nullable Long rssi;

      public @NonNull Builder setRssi(@Nullable Long setterArg) {
        this.rssi = setterArg;
        return this;
      }

      private @Nullable OperatorLocationType operatorLocationType;

      public @NonNull Builder setOperatorLocationType(@Nullable OperatorLocationType setterArg) {
        this.operatorLocationType = setterArg;
        return this;
      }

      private @Nullable ClassificationType classificationType;

      public @NonNull Builder setClassificationType(@Nullable ClassificationType setterArg) {
        this.classificationType = setterArg;
        return this;
      }

      private @Nullable Double operatorLatitude;

      public @NonNull Builder setOperatorLatitude(@NonNull Double setterArg) {
        this.operatorLatitude = setterArg;
        return this;
      }

      private @Nullable Double operatorLongitude;

      public @NonNull Builder setOperatorLongitude(@NonNull Double setterArg) {
        this.operatorLongitude = setterArg;
        return this;
      }

      private @Nullable Long areaCount;

      public @NonNull Builder setAreaCount(@NonNull Long setterArg) {
        this.areaCount = setterArg;
        return this;
      }

      private @Nullable Long areaRadius;

      public @NonNull Builder setAreaRadius(@NonNull Long setterArg) {
        this.areaRadius = setterArg;
        return this;
      }

      private @Nullable Double areaCeiling;

      public @NonNull Builder setAreaCeiling(@NonNull Double setterArg) {
        this.areaCeiling = setterArg;
        return this;
      }

      private @Nullable Double areaFloor;

      public @NonNull Builder setAreaFloor(@NonNull Double setterArg) {
        this.areaFloor = setterArg;
        return this;
      }

      private @Nullable AircraftCategory category;

      public @NonNull Builder setCategory(@Nullable AircraftCategory setterArg) {
        this.category = setterArg;
        return this;
      }

      private @Nullable AircraftClass classValue;

      public @NonNull Builder setClassValue(@Nullable AircraftClass setterArg) {
        this.classValue = setterArg;
        return this;
      }

      private @Nullable Double operatorAltitudeGeo;

      public @NonNull Builder setOperatorAltitudeGeo(@NonNull Double setterArg) {
        this.operatorAltitudeGeo = setterArg;
        return this;
      }

      public @NonNull SystemDataMessage build() {
        SystemDataMessage pigeonReturn = new SystemDataMessage();
        pigeonReturn.setReceivedTimestamp(receivedTimestamp);
        pigeonReturn.setMacAddress(macAddress);
        pigeonReturn.setSource(source);
        pigeonReturn.setRssi(rssi);
        pigeonReturn.setOperatorLocationType(operatorLocationType);
        pigeonReturn.setClassificationType(classificationType);
        pigeonReturn.setOperatorLatitude(operatorLatitude);
        pigeonReturn.setOperatorLongitude(operatorLongitude);
        pigeonReturn.setAreaCount(areaCount);
        pigeonReturn.setAreaRadius(areaRadius);
        pigeonReturn.setAreaCeiling(areaCeiling);
        pigeonReturn.setAreaFloor(areaFloor);
        pigeonReturn.setCategory(category);
        pigeonReturn.setClassValue(classValue);
        pigeonReturn.setOperatorAltitudeGeo(operatorAltitudeGeo);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(15);
      toListResult.add(receivedTimestamp);
      toListResult.add(macAddress);
      toListResult.add(source == null ? null : source.index);
      toListResult.add(rssi);
      toListResult.add(operatorLocationType == null ? null : operatorLocationType.index);
      toListResult.add(classificationType == null ? null : classificationType.index);
      toListResult.add(operatorLatitude);
      toListResult.add(operatorLongitude);
      toListResult.add(areaCount);
      toListResult.add(areaRadius);
      toListResult.add(areaCeiling);
      toListResult.add(areaFloor);
      toListResult.add(category == null ? null : category.index);
      toListResult.add(classValue == null ? null : classValue.index);
      toListResult.add(operatorAltitudeGeo);
      return toListResult;
    }

    static @NonNull SystemDataMessage fromList(@NonNull ArrayList<Object> list) {
      SystemDataMessage pigeonResult = new SystemDataMessage();
      Object receivedTimestamp = list.get(0);
      pigeonResult.setReceivedTimestamp((receivedTimestamp == null) ? null : ((receivedTimestamp instanceof Integer) ? (Integer) receivedTimestamp : (Long) receivedTimestamp));
      Object macAddress = list.get(1);
      pigeonResult.setMacAddress((String) macAddress);
      Object source = list.get(2);
      pigeonResult.setSource(source == null ? null : MessageSource.values()[(int) source]);
      Object rssi = list.get(3);
      pigeonResult.setRssi((rssi == null) ? null : ((rssi instanceof Integer) ? (Integer) rssi : (Long) rssi));
      Object operatorLocationType = list.get(4);
      pigeonResult.setOperatorLocationType(operatorLocationType == null ? null : OperatorLocationType.values()[(int) operatorLocationType]);
      Object classificationType = list.get(5);
      pigeonResult.setClassificationType(classificationType == null ? null : ClassificationType.values()[(int) classificationType]);
      Object operatorLatitude = list.get(6);
      pigeonResult.setOperatorLatitude((Double) operatorLatitude);
      Object operatorLongitude = list.get(7);
      pigeonResult.setOperatorLongitude((Double) operatorLongitude);
      Object areaCount = list.get(8);
      pigeonResult.setAreaCount((areaCount == null) ? null : ((areaCount instanceof Integer) ? (Integer) areaCount : (Long) areaCount));
      Object areaRadius = list.get(9);
      pigeonResult.setAreaRadius((areaRadius == null) ? null : ((areaRadius instanceof Integer) ? (Integer) areaRadius : (Long) areaRadius));
      Object areaCeiling = list.get(10);
      pigeonResult.setAreaCeiling((Double) areaCeiling);
      Object areaFloor = list.get(11);
      pigeonResult.setAreaFloor((Double) areaFloor);
      Object category = list.get(12);
      pigeonResult.setCategory(category == null ? null : AircraftCategory.values()[(int) category]);
      Object classValue = list.get(13);
      pigeonResult.setClassValue(classValue == null ? null : AircraftClass.values()[(int) classValue]);
      Object operatorAltitudeGeo = list.get(14);
      pigeonResult.setOperatorAltitudeGeo((Double) operatorAltitudeGeo);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ConnectionMessage {
    private @NonNull Long receivedTimestamp;

    public @NonNull Long getReceivedTimestamp() {
      return receivedTimestamp;
    }

    public void setReceivedTimestamp(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"receivedTimestamp\" is null.");
      }
      this.receivedTimestamp = setterArg;
    }

    private @NonNull String macAddress;

    public @NonNull String getMacAddress() {
      return macAddress;
    }

    public void setMacAddress(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"macAddress\" is null.");
      }
      this.macAddress = setterArg;
    }

    private @Nullable MessageSource source;

    public @Nullable MessageSource getSource() {
      return source;
    }

    public void setSource(@Nullable MessageSource setterArg) {
      this.source = setterArg;
    }

    private @Nullable Long rssi;

    public @Nullable Long getRssi() {
      return rssi;
    }

    public void setRssi(@Nullable Long setterArg) {
      this.rssi = setterArg;
    }

    private @NonNull String transportType;

    public @NonNull String getTransportType() {
      return transportType;
    }

    public void setTransportType(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"transportType\" is null.");
      }
      this.transportType = setterArg;
    }

    private @NonNull Long lastSeen;

    public @NonNull Long getLastSeen() {
      return lastSeen;
    }

    public void setLastSeen(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"lastSeen\" is null.");
      }
      this.lastSeen = setterArg;
    }

    private @NonNull Long firstSeen;

    public @NonNull Long getFirstSeen() {
      return firstSeen;
    }

    public void setFirstSeen(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"firstSeen\" is null.");
      }
      this.firstSeen = setterArg;
    }

    private @NonNull Long msgDelta;

    public @NonNull Long getMsgDelta() {
      return msgDelta;
    }

    public void setMsgDelta(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"msgDelta\" is null.");
      }
      this.msgDelta = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    ConnectionMessage() {}

    public static final class Builder {

      private @Nullable Long receivedTimestamp;

      public @NonNull Builder setReceivedTimestamp(@NonNull Long setterArg) {
        this.receivedTimestamp = setterArg;
        return this;
      }

      private @Nullable String macAddress;

      public @NonNull Builder setMacAddress(@NonNull String setterArg) {
        this.macAddress = setterArg;
        return this;
      }

      private @Nullable MessageSource source;

      public @NonNull Builder setSource(@Nullable MessageSource setterArg) {
        this.source = setterArg;
        return this;
      }

      private @Nullable Long rssi;

      public @NonNull Builder setRssi(@Nullable Long setterArg) {
        this.rssi = setterArg;
        return this;
      }

      private @Nullable String transportType;

      public @NonNull Builder setTransportType(@NonNull String setterArg) {
        this.transportType = setterArg;
        return this;
      }

      private @Nullable Long lastSeen;

      public @NonNull Builder setLastSeen(@NonNull Long setterArg) {
        this.lastSeen = setterArg;
        return this;
      }

      private @Nullable Long firstSeen;

      public @NonNull Builder setFirstSeen(@NonNull Long setterArg) {
        this.firstSeen = setterArg;
        return this;
      }

      private @Nullable Long msgDelta;

      public @NonNull Builder setMsgDelta(@NonNull Long setterArg) {
        this.msgDelta = setterArg;
        return this;
      }

      public @NonNull ConnectionMessage build() {
        ConnectionMessage pigeonReturn = new ConnectionMessage();
        pigeonReturn.setReceivedTimestamp(receivedTimestamp);
        pigeonReturn.setMacAddress(macAddress);
        pigeonReturn.setSource(source);
        pigeonReturn.setRssi(rssi);
        pigeonReturn.setTransportType(transportType);
        pigeonReturn.setLastSeen(lastSeen);
        pigeonReturn.setFirstSeen(firstSeen);
        pigeonReturn.setMsgDelta(msgDelta);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(8);
      toListResult.add(receivedTimestamp);
      toListResult.add(macAddress);
      toListResult.add(source == null ? null : source.index);
      toListResult.add(rssi);
      toListResult.add(transportType);
      toListResult.add(lastSeen);
      toListResult.add(firstSeen);
      toListResult.add(msgDelta);
      return toListResult;
    }

    static @NonNull ConnectionMessage fromList(@NonNull ArrayList<Object> list) {
      ConnectionMessage pigeonResult = new ConnectionMessage();
      Object receivedTimestamp = list.get(0);
      pigeonResult.setReceivedTimestamp((receivedTimestamp == null) ? null : ((receivedTimestamp instanceof Integer) ? (Integer) receivedTimestamp : (Long) receivedTimestamp));
      Object macAddress = list.get(1);
      pigeonResult.setMacAddress((String) macAddress);
      Object source = list.get(2);
      pigeonResult.setSource(source == null ? null : MessageSource.values()[(int) source]);
      Object rssi = list.get(3);
      pigeonResult.setRssi((rssi == null) ? null : ((rssi instanceof Integer) ? (Integer) rssi : (Long) rssi));
      Object transportType = list.get(4);
      pigeonResult.setTransportType((String) transportType);
      Object lastSeen = list.get(5);
      pigeonResult.setLastSeen((lastSeen == null) ? null : ((lastSeen instanceof Integer) ? (Integer) lastSeen : (Long) lastSeen));
      Object firstSeen = list.get(6);
      pigeonResult.setFirstSeen((firstSeen == null) ? null : ((firstSeen instanceof Integer) ? (Integer) firstSeen : (Long) firstSeen));
      Object msgDelta = list.get(7);
      pigeonResult.setMsgDelta((msgDelta == null) ? null : ((msgDelta instanceof Integer) ? (Integer) msgDelta : (Long) msgDelta));
      return pigeonResult;
    }
  }

  public interface Result<T> {
    @SuppressWarnings("UnknownNullness")
    void success(T result);

    void error(@NonNull Throwable error);
  }
  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface Api {

    void startScanBluetooth(@NonNull Result<Void> result);

    void startScanWifi(@NonNull Result<Void> result);

    void stopScanBluetooth(@NonNull Result<Void> result);

    void stopScanWifi(@NonNull Result<Void> result);

    void setBtScanPriority(@NonNull ScanPriority priority, @NonNull Result<Void> result);

    void isScanningBluetooth(@NonNull Result<Boolean> result);

    void isScanningWifi(@NonNull Result<Boolean> result);

    void bluetoothState(@NonNull Result<Long> result);

    void wifiState(@NonNull Result<Long> result);

    void btExtendedSupported(@NonNull Result<Boolean> result);

    void btMaxAdvDataLen(@NonNull Result<Long> result);

    void wifiNaNSupported(@NonNull Result<Boolean> result);

    /** The codec used by Api. */
    static @NonNull MessageCodec<Object> getCodec() {
      return new StandardMessageCodec();
    }
    /**Sets up an instance of `Api` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable Api api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.Api.startScanBluetooth", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.startScanBluetooth(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.Api.startScanWifi", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.startScanWifi(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.Api.stopScanBluetooth", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.stopScanBluetooth(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.Api.stopScanWifi", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.stopScanWifi(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.Api.setBtScanPriority", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ScanPriority priorityArg = args.get(0) == null ? null : ScanPriority.values()[(int) args.get(0)];
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setBtScanPriority(priorityArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.Api.isScanningBluetooth", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Boolean> resultCallback =
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.isScanningBluetooth(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.Api.isScanningWifi", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Boolean> resultCallback =
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.isScanningWifi(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.Api.bluetoothState", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Long> resultCallback =
                    new Result<Long>() {
                      public void success(Long result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.bluetoothState(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.Api.wifiState", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Long> resultCallback =
                    new Result<Long>() {
                      public void success(Long result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.wifiState(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.Api.btExtendedSupported", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Boolean> resultCallback =
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.btExtendedSupported(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.Api.btMaxAdvDataLen", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Long> resultCallback =
                    new Result<Long>() {
                      public void success(Long result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.btMaxAdvDataLen(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.Api.wifiNaNSupported", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Boolean> resultCallback =
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.wifiNaNSupported(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class MessageApiCodec extends StandardMessageCodec {
    public static final MessageApiCodec INSTANCE = new MessageApiCodec();

    private MessageApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return AuthenticationMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return BasicIdMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return ConnectionMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return LocationMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return OperatorIdMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return SelfIdMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 134:
          return SystemDataMessage.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof AuthenticationMessage) {
        stream.write(128);
        writeValue(stream, ((AuthenticationMessage) value).toList());
      } else if (value instanceof BasicIdMessage) {
        stream.write(129);
        writeValue(stream, ((BasicIdMessage) value).toList());
      } else if (value instanceof ConnectionMessage) {
        stream.write(130);
        writeValue(stream, ((ConnectionMessage) value).toList());
      } else if (value instanceof LocationMessage) {
        stream.write(131);
        writeValue(stream, ((LocationMessage) value).toList());
      } else if (value instanceof OperatorIdMessage) {
        stream.write(132);
        writeValue(stream, ((OperatorIdMessage) value).toList());
      } else if (value instanceof SelfIdMessage) {
        stream.write(133);
        writeValue(stream, ((SelfIdMessage) value).toList());
      } else if (value instanceof SystemDataMessage) {
        stream.write(134);
        writeValue(stream, ((SystemDataMessage) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface MessageApi {

    @Nullable 
    Long determineMessageType(@NonNull byte[] payload, @NonNull Long offset);

    @Nullable 
    BasicIdMessage fromBufferBasic(@NonNull byte[] payload, @NonNull Long offset, @NonNull String macAddress);

    @Nullable 
    LocationMessage fromBufferLocation(@NonNull byte[] payload, @NonNull Long offset, @NonNull String macAddress);

    @Nullable 
    OperatorIdMessage fromBufferOperatorId(@NonNull byte[] payload, @NonNull Long offset, @NonNull String macAddress);

    @Nullable 
    SelfIdMessage fromBufferSelfId(@NonNull byte[] payload, @NonNull Long offset, @NonNull String macAddress);

    @Nullable 
    AuthenticationMessage fromBufferAuthentication(@NonNull byte[] payload, @NonNull Long offset, @NonNull String macAddress);

    @Nullable 
    SystemDataMessage fromBufferSystemData(@NonNull byte[] payload, @NonNull Long offset, @NonNull String macAddress);

    @Nullable 
    ConnectionMessage fromBufferConnection(@NonNull byte[] payload, @NonNull Long offset, @NonNull String macAddress);

    /** The codec used by MessageApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return MessageApiCodec.INSTANCE;
    }
    /**Sets up an instance of `MessageApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable MessageApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MessageApi.determineMessageType", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                byte[] payloadArg = (byte[]) args.get(0);
                Number offsetArg = (Number) args.get(1);
                try {
                  Long output = api.determineMessageType(payloadArg, (offsetArg == null) ? null : offsetArg.longValue());
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MessageApi.fromBufferBasic", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                byte[] payloadArg = (byte[]) args.get(0);
                Number offsetArg = (Number) args.get(1);
                String macAddressArg = (String) args.get(2);
                try {
                  BasicIdMessage output = api.fromBufferBasic(payloadArg, (offsetArg == null) ? null : offsetArg.longValue(), macAddressArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MessageApi.fromBufferLocation", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                byte[] payloadArg = (byte[]) args.get(0);
                Number offsetArg = (Number) args.get(1);
                String macAddressArg = (String) args.get(2);
                try {
                  LocationMessage output = api.fromBufferLocation(payloadArg, (offsetArg == null) ? null : offsetArg.longValue(), macAddressArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MessageApi.fromBufferOperatorId", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                byte[] payloadArg = (byte[]) args.get(0);
                Number offsetArg = (Number) args.get(1);
                String macAddressArg = (String) args.get(2);
                try {
                  OperatorIdMessage output = api.fromBufferOperatorId(payloadArg, (offsetArg == null) ? null : offsetArg.longValue(), macAddressArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MessageApi.fromBufferSelfId", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                byte[] payloadArg = (byte[]) args.get(0);
                Number offsetArg = (Number) args.get(1);
                String macAddressArg = (String) args.get(2);
                try {
                  SelfIdMessage output = api.fromBufferSelfId(payloadArg, (offsetArg == null) ? null : offsetArg.longValue(), macAddressArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MessageApi.fromBufferAuthentication", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                byte[] payloadArg = (byte[]) args.get(0);
                Number offsetArg = (Number) args.get(1);
                String macAddressArg = (String) args.get(2);
                try {
                  AuthenticationMessage output = api.fromBufferAuthentication(payloadArg, (offsetArg == null) ? null : offsetArg.longValue(), macAddressArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MessageApi.fromBufferSystemData", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                byte[] payloadArg = (byte[]) args.get(0);
                Number offsetArg = (Number) args.get(1);
                String macAddressArg = (String) args.get(2);
                try {
                  SystemDataMessage output = api.fromBufferSystemData(payloadArg, (offsetArg == null) ? null : offsetArg.longValue(), macAddressArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MessageApi.fromBufferConnection", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                byte[] payloadArg = (byte[]) args.get(0);
                Number offsetArg = (Number) args.get(1);
                String macAddressArg = (String) args.get(2);
                try {
                  ConnectionMessage output = api.fromBufferConnection(payloadArg, (offsetArg == null) ? null : offsetArg.longValue(), macAddressArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
