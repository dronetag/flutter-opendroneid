// Autogenerated from Pigeon (v1.0.17), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "pigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface BasicIdMessage ()
+ (BasicIdMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface LocationMessage ()
+ (LocationMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface OperatorIdMessage ()
+ (OperatorIdMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation BasicIdMessage
+ (instancetype)makeWithReceivedTimestamp:(NSNumber *)receivedTimestamp
    macAddress:(NSString *)macAddress
    source:(MessageSource)source
    rssi:(nullable NSNumber *)rssi
    uasId:(NSString *)uasId
    idType:(IdType)idType
    uaType:(UaType)uaType {
  BasicIdMessage* pigeonResult = [[BasicIdMessage alloc] init];
  pigeonResult.receivedTimestamp = receivedTimestamp;
  pigeonResult.macAddress = macAddress;
  pigeonResult.source = source;
  pigeonResult.rssi = rssi;
  pigeonResult.uasId = uasId;
  pigeonResult.idType = idType;
  pigeonResult.uaType = uaType;
  return pigeonResult;
}
+ (BasicIdMessage *)fromMap:(NSDictionary *)dict {
  BasicIdMessage *pigeonResult = [[BasicIdMessage alloc] init];
  pigeonResult.receivedTimestamp = GetNullableObject(dict, @"receivedTimestamp");
  NSAssert(pigeonResult.receivedTimestamp != nil, @"");
  pigeonResult.macAddress = GetNullableObject(dict, @"macAddress");
  NSAssert(pigeonResult.macAddress != nil, @"");
  pigeonResult.source = [GetNullableObject(dict, @"source") integerValue];
  pigeonResult.rssi = GetNullableObject(dict, @"rssi");
  pigeonResult.uasId = GetNullableObject(dict, @"uasId");
  NSAssert(pigeonResult.uasId != nil, @"");
  pigeonResult.idType = [GetNullableObject(dict, @"idType") integerValue];
  pigeonResult.uaType = [GetNullableObject(dict, @"uaType") integerValue];
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.receivedTimestamp ? self.receivedTimestamp : [NSNull null]), @"receivedTimestamp", (self.macAddress ? self.macAddress : [NSNull null]), @"macAddress", @(self.source), @"source", (self.rssi ? self.rssi : [NSNull null]), @"rssi", (self.uasId ? self.uasId : [NSNull null]), @"uasId", @(self.idType), @"idType", @(self.uaType), @"uaType", nil];
}
@end

@implementation LocationMessage
+ (instancetype)makeWithReceivedTimestamp:(NSNumber *)receivedTimestamp
    macAddress:(NSString *)macAddress
    source:(MessageSource)source
    rssi:(nullable NSNumber *)rssi
    status:(AircraftStatus)status
    heightType:(HeightType)heightType
    direction:(nullable NSNumber *)direction
    speedHorizontal:(nullable NSNumber *)speedHorizontal
    speedVertical:(nullable NSNumber *)speedVertical
    latitude:(nullable NSNumber *)latitude
    longitude:(nullable NSNumber *)longitude
    altitudePressure:(nullable NSNumber *)altitudePressure
    altitudeGeodetic:(nullable NSNumber *)altitudeGeodetic
    height:(nullable NSNumber *)height
    horizontalAccuracy:(HorizontalAccuracy)horizontalAccuracy
    verticalAccuracy:(VerticalAccuracy)verticalAccuracy
    baroAccuracy:(VerticalAccuracy)baroAccuracy
    speedAccuracy:(SpeedAccuracy)speedAccuracy
    time:(nullable NSNumber *)time
    timeAccuracy:(nullable NSNumber *)timeAccuracy {
  LocationMessage* pigeonResult = [[LocationMessage alloc] init];
  pigeonResult.receivedTimestamp = receivedTimestamp;
  pigeonResult.macAddress = macAddress;
  pigeonResult.source = source;
  pigeonResult.rssi = rssi;
  pigeonResult.status = status;
  pigeonResult.heightType = heightType;
  pigeonResult.direction = direction;
  pigeonResult.speedHorizontal = speedHorizontal;
  pigeonResult.speedVertical = speedVertical;
  pigeonResult.latitude = latitude;
  pigeonResult.longitude = longitude;
  pigeonResult.altitudePressure = altitudePressure;
  pigeonResult.altitudeGeodetic = altitudeGeodetic;
  pigeonResult.height = height;
  pigeonResult.horizontalAccuracy = horizontalAccuracy;
  pigeonResult.verticalAccuracy = verticalAccuracy;
  pigeonResult.baroAccuracy = baroAccuracy;
  pigeonResult.speedAccuracy = speedAccuracy;
  pigeonResult.time = time;
  pigeonResult.timeAccuracy = timeAccuracy;
  return pigeonResult;
}
+ (LocationMessage *)fromMap:(NSDictionary *)dict {
  LocationMessage *pigeonResult = [[LocationMessage alloc] init];
  pigeonResult.receivedTimestamp = GetNullableObject(dict, @"receivedTimestamp");
  NSAssert(pigeonResult.receivedTimestamp != nil, @"");
  pigeonResult.macAddress = GetNullableObject(dict, @"macAddress");
  NSAssert(pigeonResult.macAddress != nil, @"");
  pigeonResult.source = [GetNullableObject(dict, @"source") integerValue];
  pigeonResult.rssi = GetNullableObject(dict, @"rssi");
  pigeonResult.status = [GetNullableObject(dict, @"status") integerValue];
  pigeonResult.heightType = [GetNullableObject(dict, @"heightType") integerValue];
  pigeonResult.direction = GetNullableObject(dict, @"direction");
  pigeonResult.speedHorizontal = GetNullableObject(dict, @"speedHorizontal");
  pigeonResult.speedVertical = GetNullableObject(dict, @"speedVertical");
  pigeonResult.latitude = GetNullableObject(dict, @"latitude");
  pigeonResult.longitude = GetNullableObject(dict, @"longitude");
  pigeonResult.altitudePressure = GetNullableObject(dict, @"altitudePressure");
  pigeonResult.altitudeGeodetic = GetNullableObject(dict, @"altitudeGeodetic");
  pigeonResult.height = GetNullableObject(dict, @"height");
  pigeonResult.horizontalAccuracy = [GetNullableObject(dict, @"horizontalAccuracy") integerValue];
  pigeonResult.verticalAccuracy = [GetNullableObject(dict, @"verticalAccuracy") integerValue];
  pigeonResult.baroAccuracy = [GetNullableObject(dict, @"baroAccuracy") integerValue];
  pigeonResult.speedAccuracy = [GetNullableObject(dict, @"speedAccuracy") integerValue];
  pigeonResult.time = GetNullableObject(dict, @"time");
  pigeonResult.timeAccuracy = GetNullableObject(dict, @"timeAccuracy");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.receivedTimestamp ? self.receivedTimestamp : [NSNull null]), @"receivedTimestamp", (self.macAddress ? self.macAddress : [NSNull null]), @"macAddress", @(self.source), @"source", (self.rssi ? self.rssi : [NSNull null]), @"rssi", @(self.status), @"status", @(self.heightType), @"heightType", (self.direction ? self.direction : [NSNull null]), @"direction", (self.speedHorizontal ? self.speedHorizontal : [NSNull null]), @"speedHorizontal", (self.speedVertical ? self.speedVertical : [NSNull null]), @"speedVertical", (self.latitude ? self.latitude : [NSNull null]), @"latitude", (self.longitude ? self.longitude : [NSNull null]), @"longitude", (self.altitudePressure ? self.altitudePressure : [NSNull null]), @"altitudePressure", (self.altitudeGeodetic ? self.altitudeGeodetic : [NSNull null]), @"altitudeGeodetic", (self.height ? self.height : [NSNull null]), @"height", @(self.horizontalAccuracy), @"horizontalAccuracy", @(self.verticalAccuracy), @"verticalAccuracy", @(self.baroAccuracy), @"baroAccuracy", @(self.speedAccuracy), @"speedAccuracy", (self.time ? self.time : [NSNull null]), @"time", (self.timeAccuracy ? self.timeAccuracy : [NSNull null]), @"timeAccuracy", nil];
}
@end

@implementation OperatorIdMessage
+ (instancetype)makeWithMacAddress:(NSString *)macAddress
    source:(MessageSource)source
    rssi:(nullable NSNumber *)rssi
    operatorId:(NSString *)operatorId {
  OperatorIdMessage* pigeonResult = [[OperatorIdMessage alloc] init];
  pigeonResult.macAddress = macAddress;
  pigeonResult.source = source;
  pigeonResult.rssi = rssi;
  pigeonResult.operatorId = operatorId;
  return pigeonResult;
}
+ (OperatorIdMessage *)fromMap:(NSDictionary *)dict {
  OperatorIdMessage *pigeonResult = [[OperatorIdMessage alloc] init];
  pigeonResult.macAddress = GetNullableObject(dict, @"macAddress");
  NSAssert(pigeonResult.macAddress != nil, @"");
  pigeonResult.source = [GetNullableObject(dict, @"source") integerValue];
  pigeonResult.rssi = GetNullableObject(dict, @"rssi");
  pigeonResult.operatorId = GetNullableObject(dict, @"operatorId");
  NSAssert(pigeonResult.operatorId != nil, @"");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.macAddress ? self.macAddress : [NSNull null]), @"macAddress", @(self.source), @"source", (self.rssi ? self.rssi : [NSNull null]), @"rssi", (self.operatorId ? self.operatorId : [NSNull null]), @"operatorId", nil];
}
@end

@interface ApiCodecReader : FlutterStandardReader
@end
@implementation ApiCodecReader
@end

@interface ApiCodecWriter : FlutterStandardWriter
@end
@implementation ApiCodecWriter
@end

@interface ApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation ApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[ApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[ApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *ApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    ApiCodecReaderWriter *readerWriter = [[ApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void ApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<Api> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.Api.startScan"
        binaryMessenger:binaryMessenger
        codec:ApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startScanWithError:)], @"Api api (%@) doesn't respond to @selector(startScanWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api startScanWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.Api.stopScan"
        binaryMessenger:binaryMessenger
        codec:ApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopScanWithError:)], @"Api api (%@) doesn't respond to @selector(stopScanWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api stopScanWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.Api.isScanning"
        binaryMessenger:binaryMessenger
        codec:ApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(isScanningWithError:)], @"Api api (%@) doesn't respond to @selector(isScanningWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api isScanningWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.Api.bluetoothState"
        binaryMessenger:binaryMessenger
        codec:ApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(bluetoothStateWithError:)], @"Api api (%@) doesn't respond to @selector(bluetoothStateWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api bluetoothStateWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface MessageApiCodecReader : FlutterStandardReader
@end
@implementation MessageApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [BasicIdMessage fromMap:[self readValue]];
    
    case 129:     
      return [LocationMessage fromMap:[self readValue]];
    
    case 130:     
      return [OperatorIdMessage fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface MessageApiCodecWriter : FlutterStandardWriter
@end
@implementation MessageApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[BasicIdMessage class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[LocationMessage class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[OperatorIdMessage class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface MessageApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation MessageApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[MessageApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[MessageApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *MessageApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    MessageApiCodecReaderWriter *readerWriter = [[MessageApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void MessageApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<MessageApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.MessageApi.determineMessageType"
        binaryMessenger:binaryMessenger
        codec:MessageApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(determineMessageTypePayload:offset:error:)], @"MessageApi api (%@) doesn't respond to @selector(determineMessageTypePayload:offset:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_payload = args[0];
        NSNumber *arg_offset = args[1];
        FlutterError *error;
        NSNumber *output = [api determineMessageTypePayload:arg_payload offset:arg_offset error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.MessageApi.fromBufferBasic"
        binaryMessenger:binaryMessenger
        codec:MessageApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(fromBufferBasicPayload:offset:error:)], @"MessageApi api (%@) doesn't respond to @selector(fromBufferBasicPayload:offset:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_payload = args[0];
        NSNumber *arg_offset = args[1];
        FlutterError *error;
        BasicIdMessage *output = [api fromBufferBasicPayload:arg_payload offset:arg_offset error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.MessageApi.fromBufferLocation"
        binaryMessenger:binaryMessenger
        codec:MessageApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(fromBufferLocationPayload:offset:error:)], @"MessageApi api (%@) doesn't respond to @selector(fromBufferLocationPayload:offset:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_payload = args[0];
        NSNumber *arg_offset = args[1];
        FlutterError *error;
        LocationMessage *output = [api fromBufferLocationPayload:arg_payload offset:arg_offset error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.MessageApi.fromBufferOperatorId"
        binaryMessenger:binaryMessenger
        codec:MessageApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(fromBufferOperatorIdPayload:offset:error:)], @"MessageApi api (%@) doesn't respond to @selector(fromBufferOperatorIdPayload:offset:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_payload = args[0];
        NSNumber *arg_offset = args[1];
        FlutterError *error;
        OperatorIdMessage *output = [api fromBufferOperatorIdPayload:arg_payload offset:arg_offset error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
