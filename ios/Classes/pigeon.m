// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "pigeon.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface DTGODIDPayload ()
+ (DTGODIDPayload *)fromList:(NSArray *)list;
+ (nullable DTGODIDPayload *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation DTGODIDPayload
+ (instancetype)makeWithRawData:(FlutterStandardTypedData *)rawData
    receivedTimestamp:(NSNumber *)receivedTimestamp
    macAddress:(NSString *)macAddress
    rssi:(nullable NSNumber *)rssi
    source:(DTGMessageSource)source
    btName:(nullable NSString *)btName {
  DTGODIDPayload* pigeonResult = [[DTGODIDPayload alloc] init];
  pigeonResult.rawData = rawData;
  pigeonResult.receivedTimestamp = receivedTimestamp;
  pigeonResult.macAddress = macAddress;
  pigeonResult.rssi = rssi;
  pigeonResult.source = source;
  pigeonResult.btName = btName;
  return pigeonResult;
}
+ (DTGODIDPayload *)fromList:(NSArray *)list {
  DTGODIDPayload *pigeonResult = [[DTGODIDPayload alloc] init];
  pigeonResult.rawData = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.rawData != nil, @"");
  pigeonResult.receivedTimestamp = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.receivedTimestamp != nil, @"");
  pigeonResult.macAddress = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.macAddress != nil, @"");
  pigeonResult.rssi = GetNullableObjectAtIndex(list, 3);
  pigeonResult.source = [GetNullableObjectAtIndex(list, 4) integerValue];
  pigeonResult.btName = GetNullableObjectAtIndex(list, 5);
  return pigeonResult;
}
+ (nullable DTGODIDPayload *)nullableFromList:(NSArray *)list {
  return (list) ? [DTGODIDPayload fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.rawData ?: [NSNull null]),
    (self.receivedTimestamp ?: [NSNull null]),
    (self.macAddress ?: [NSNull null]),
    (self.rssi ?: [NSNull null]),
    @(self.source),
    (self.btName ?: [NSNull null]),
  ];
}
@end

NSObject<FlutterMessageCodec> *DTGApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void DTGApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<DTGApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_opendroneid.Api.initialize"
        binaryMessenger:binaryMessenger
        codec:DTGApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(initializeWithCompletion:)], @"DTGApi api (%@) doesn't respond to @selector(initializeWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api initializeWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_opendroneid.Api.isInitialized"
        binaryMessenger:binaryMessenger
        codec:DTGApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(isInitializedWithCompletion:)], @"DTGApi api (%@) doesn't respond to @selector(isInitializedWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api isInitializedWithCompletion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_opendroneid.Api.startScanBluetooth"
        binaryMessenger:binaryMessenger
        codec:DTGApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startScanBluetoothServiceUuid:completion:)], @"DTGApi api (%@) doesn't respond to @selector(startScanBluetoothServiceUuid:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_serviceUuid = GetNullableObjectAtIndex(args, 0);
        [api startScanBluetoothServiceUuid:arg_serviceUuid completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_opendroneid.Api.startScanWifi"
        binaryMessenger:binaryMessenger
        codec:DTGApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startScanWifiWithCompletion:)], @"DTGApi api (%@) doesn't respond to @selector(startScanWifiWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api startScanWifiWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_opendroneid.Api.stopScanBluetooth"
        binaryMessenger:binaryMessenger
        codec:DTGApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopScanBluetoothWithCompletion:)], @"DTGApi api (%@) doesn't respond to @selector(stopScanBluetoothWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api stopScanBluetoothWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_opendroneid.Api.stopScanWifi"
        binaryMessenger:binaryMessenger
        codec:DTGApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopScanWifiWithCompletion:)], @"DTGApi api (%@) doesn't respond to @selector(stopScanWifiWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api stopScanWifiWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_opendroneid.Api.setBtScanPriority"
        binaryMessenger:binaryMessenger
        codec:DTGApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setBtScanPriorityPriority:completion:)], @"DTGApi api (%@) doesn't respond to @selector(setBtScanPriorityPriority:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        DTGScanPriority arg_priority = [GetNullableObjectAtIndex(args, 0) integerValue];
        [api setBtScanPriorityPriority:arg_priority completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_opendroneid.Api.setBtServiceUuid"
        binaryMessenger:binaryMessenger
        codec:DTGApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setBtServiceUuidServiceUuid:completion:)], @"DTGApi api (%@) doesn't respond to @selector(setBtServiceUuidServiceUuid:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_serviceUuid = GetNullableObjectAtIndex(args, 0);
        [api setBtServiceUuidServiceUuid:arg_serviceUuid completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_opendroneid.Api.isScanningBluetooth"
        binaryMessenger:binaryMessenger
        codec:DTGApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(isScanningBluetoothWithCompletion:)], @"DTGApi api (%@) doesn't respond to @selector(isScanningBluetoothWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api isScanningBluetoothWithCompletion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_opendroneid.Api.isScanningWifi"
        binaryMessenger:binaryMessenger
        codec:DTGApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(isScanningWifiWithCompletion:)], @"DTGApi api (%@) doesn't respond to @selector(isScanningWifiWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api isScanningWifiWithCompletion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_opendroneid.Api.bluetoothState"
        binaryMessenger:binaryMessenger
        codec:DTGApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(bluetoothStateWithCompletion:)], @"DTGApi api (%@) doesn't respond to @selector(bluetoothStateWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api bluetoothStateWithCompletion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_opendroneid.Api.wifiState"
        binaryMessenger:binaryMessenger
        codec:DTGApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(wifiStateWithCompletion:)], @"DTGApi api (%@) doesn't respond to @selector(wifiStateWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api wifiStateWithCompletion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_opendroneid.Api.btExtendedSupported"
        binaryMessenger:binaryMessenger
        codec:DTGApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(btExtendedSupportedWithCompletion:)], @"DTGApi api (%@) doesn't respond to @selector(btExtendedSupportedWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api btExtendedSupportedWithCompletion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_opendroneid.Api.btMaxAdvDataLen"
        binaryMessenger:binaryMessenger
        codec:DTGApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(btMaxAdvDataLenWithCompletion:)], @"DTGApi api (%@) doesn't respond to @selector(btMaxAdvDataLenWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api btMaxAdvDataLenWithCompletion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_opendroneid.Api.wifiNaNSupported"
        binaryMessenger:binaryMessenger
        codec:DTGApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(wifiNaNSupportedWithCompletion:)], @"DTGApi api (%@) doesn't respond to @selector(wifiNaNSupportedWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api wifiNaNSupportedWithCompletion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface DTGPayloadApiCodecReader : FlutterStandardReader
@end
@implementation DTGPayloadApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [DTGODIDPayload fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface DTGPayloadApiCodecWriter : FlutterStandardWriter
@end
@implementation DTGPayloadApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[DTGODIDPayload class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface DTGPayloadApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation DTGPayloadApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[DTGPayloadApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[DTGPayloadApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *DTGPayloadApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    DTGPayloadApiCodecReaderWriter *readerWriter = [[DTGPayloadApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void DTGPayloadApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<DTGPayloadApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.flutter_opendroneid.PayloadApi.buildPayload"
        binaryMessenger:binaryMessenger
        codec:DTGPayloadApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(buildPayloadRawData:source:macAddress:btName:rssi:receivedTimestamp:error:)], @"DTGPayloadApi api (%@) doesn't respond to @selector(buildPayloadRawData:source:macAddress:btName:rssi:receivedTimestamp:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_rawData = GetNullableObjectAtIndex(args, 0);
        DTGMessageSource arg_source = [GetNullableObjectAtIndex(args, 1) integerValue];
        NSString *arg_macAddress = GetNullableObjectAtIndex(args, 2);
        NSString *arg_btName = GetNullableObjectAtIndex(args, 3);
        NSNumber *arg_rssi = GetNullableObjectAtIndex(args, 4);
        NSNumber *arg_receivedTimestamp = GetNullableObjectAtIndex(args, 5);
        FlutterError *error;
        DTGODIDPayload *output = [api buildPayloadRawData:arg_rawData source:arg_source macAddress:arg_macAddress btName:arg_btName rssi:arg_rssi receivedTimestamp:arg_receivedTimestamp error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
