// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "pigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface DTGBasicIdMessage ()
+ (DTGBasicIdMessage *)fromList:(NSArray *)list;
+ (nullable DTGBasicIdMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface DTGLocationMessage ()
+ (DTGLocationMessage *)fromList:(NSArray *)list;
+ (nullable DTGLocationMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface DTGOperatorIdMessage ()
+ (DTGOperatorIdMessage *)fromList:(NSArray *)list;
+ (nullable DTGOperatorIdMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface DTGAuthenticationMessage ()
+ (DTGAuthenticationMessage *)fromList:(NSArray *)list;
+ (nullable DTGAuthenticationMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface DTGSelfIdMessage ()
+ (DTGSelfIdMessage *)fromList:(NSArray *)list;
+ (nullable DTGSelfIdMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface DTGSystemDataMessage ()
+ (DTGSystemDataMessage *)fromList:(NSArray *)list;
+ (nullable DTGSystemDataMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface DTGConnectionMessage ()
+ (DTGConnectionMessage *)fromList:(NSArray *)list;
+ (nullable DTGConnectionMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation DTGBasicIdMessage
+ (instancetype)makeWithReceivedTimestamp:(NSNumber *)receivedTimestamp
    macAddress:(NSString *)macAddress
    source:(DTGMessageSource)source
    rssi:(nullable NSNumber *)rssi
    uasId:(NSString *)uasId
    idType:(DTGIdType)idType
    uaType:(DTGUaType)uaType {
  DTGBasicIdMessage* pigeonResult = [[DTGBasicIdMessage alloc] init];
  pigeonResult.receivedTimestamp = receivedTimestamp;
  pigeonResult.macAddress = macAddress;
  pigeonResult.source = source;
  pigeonResult.rssi = rssi;
  pigeonResult.uasId = uasId;
  pigeonResult.idType = idType;
  pigeonResult.uaType = uaType;
  return pigeonResult;
}
+ (DTGBasicIdMessage *)fromList:(NSArray *)list {
  DTGBasicIdMessage *pigeonResult = [[DTGBasicIdMessage alloc] init];
  pigeonResult.receivedTimestamp = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.receivedTimestamp != nil, @"");
  pigeonResult.macAddress = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.macAddress != nil, @"");
  pigeonResult.source = [GetNullableObjectAtIndex(list, 2) integerValue];
  pigeonResult.rssi = GetNullableObjectAtIndex(list, 3);
  pigeonResult.uasId = GetNullableObjectAtIndex(list, 4);
  NSAssert(pigeonResult.uasId != nil, @"");
  pigeonResult.idType = [GetNullableObjectAtIndex(list, 5) integerValue];
  pigeonResult.uaType = [GetNullableObjectAtIndex(list, 6) integerValue];
  return pigeonResult;
}
+ (nullable DTGBasicIdMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [DTGBasicIdMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.receivedTimestamp ?: [NSNull null]),
    (self.macAddress ?: [NSNull null]),
    @(self.source),
    (self.rssi ?: [NSNull null]),
    (self.uasId ?: [NSNull null]),
    @(self.idType),
    @(self.uaType),
  ];
}
@end

@implementation DTGLocationMessage
+ (instancetype)makeWithReceivedTimestamp:(NSNumber *)receivedTimestamp
    macAddress:(NSString *)macAddress
    source:(DTGMessageSource)source
    rssi:(nullable NSNumber *)rssi
    status:(DTGAircraftStatus)status
    heightType:(DTGHeightType)heightType
    direction:(nullable NSNumber *)direction
    speedHorizontal:(nullable NSNumber *)speedHorizontal
    speedVertical:(nullable NSNumber *)speedVertical
    latitude:(nullable NSNumber *)latitude
    longitude:(nullable NSNumber *)longitude
    altitudePressure:(nullable NSNumber *)altitudePressure
    altitudeGeodetic:(nullable NSNumber *)altitudeGeodetic
    height:(nullable NSNumber *)height
    horizontalAccuracy:(DTGHorizontalAccuracy)horizontalAccuracy
    verticalAccuracy:(DTGVerticalAccuracy)verticalAccuracy
    baroAccuracy:(DTGVerticalAccuracy)baroAccuracy
    speedAccuracy:(DTGSpeedAccuracy)speedAccuracy
    time:(nullable NSNumber *)time
    timeAccuracy:(nullable NSNumber *)timeAccuracy {
  DTGLocationMessage* pigeonResult = [[DTGLocationMessage alloc] init];
  pigeonResult.receivedTimestamp = receivedTimestamp;
  pigeonResult.macAddress = macAddress;
  pigeonResult.source = source;
  pigeonResult.rssi = rssi;
  pigeonResult.status = status;
  pigeonResult.heightType = heightType;
  pigeonResult.direction = direction;
  pigeonResult.speedHorizontal = speedHorizontal;
  pigeonResult.speedVertical = speedVertical;
  pigeonResult.latitude = latitude;
  pigeonResult.longitude = longitude;
  pigeonResult.altitudePressure = altitudePressure;
  pigeonResult.altitudeGeodetic = altitudeGeodetic;
  pigeonResult.height = height;
  pigeonResult.horizontalAccuracy = horizontalAccuracy;
  pigeonResult.verticalAccuracy = verticalAccuracy;
  pigeonResult.baroAccuracy = baroAccuracy;
  pigeonResult.speedAccuracy = speedAccuracy;
  pigeonResult.time = time;
  pigeonResult.timeAccuracy = timeAccuracy;
  return pigeonResult;
}
+ (DTGLocationMessage *)fromList:(NSArray *)list {
  DTGLocationMessage *pigeonResult = [[DTGLocationMessage alloc] init];
  pigeonResult.receivedTimestamp = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.receivedTimestamp != nil, @"");
  pigeonResult.macAddress = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.macAddress != nil, @"");
  pigeonResult.source = [GetNullableObjectAtIndex(list, 2) integerValue];
  pigeonResult.rssi = GetNullableObjectAtIndex(list, 3);
  pigeonResult.status = [GetNullableObjectAtIndex(list, 4) integerValue];
  pigeonResult.heightType = [GetNullableObjectAtIndex(list, 5) integerValue];
  pigeonResult.direction = GetNullableObjectAtIndex(list, 6);
  pigeonResult.speedHorizontal = GetNullableObjectAtIndex(list, 7);
  pigeonResult.speedVertical = GetNullableObjectAtIndex(list, 8);
  pigeonResult.latitude = GetNullableObjectAtIndex(list, 9);
  pigeonResult.longitude = GetNullableObjectAtIndex(list, 10);
  pigeonResult.altitudePressure = GetNullableObjectAtIndex(list, 11);
  pigeonResult.altitudeGeodetic = GetNullableObjectAtIndex(list, 12);
  pigeonResult.height = GetNullableObjectAtIndex(list, 13);
  pigeonResult.horizontalAccuracy = [GetNullableObjectAtIndex(list, 14) integerValue];
  pigeonResult.verticalAccuracy = [GetNullableObjectAtIndex(list, 15) integerValue];
  pigeonResult.baroAccuracy = [GetNullableObjectAtIndex(list, 16) integerValue];
  pigeonResult.speedAccuracy = [GetNullableObjectAtIndex(list, 17) integerValue];
  pigeonResult.time = GetNullableObjectAtIndex(list, 18);
  pigeonResult.timeAccuracy = GetNullableObjectAtIndex(list, 19);
  return pigeonResult;
}
+ (nullable DTGLocationMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [DTGLocationMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.receivedTimestamp ?: [NSNull null]),
    (self.macAddress ?: [NSNull null]),
    @(self.source),
    (self.rssi ?: [NSNull null]),
    @(self.status),
    @(self.heightType),
    (self.direction ?: [NSNull null]),
    (self.speedHorizontal ?: [NSNull null]),
    (self.speedVertical ?: [NSNull null]),
    (self.latitude ?: [NSNull null]),
    (self.longitude ?: [NSNull null]),
    (self.altitudePressure ?: [NSNull null]),
    (self.altitudeGeodetic ?: [NSNull null]),
    (self.height ?: [NSNull null]),
    @(self.horizontalAccuracy),
    @(self.verticalAccuracy),
    @(self.baroAccuracy),
    @(self.speedAccuracy),
    (self.time ?: [NSNull null]),
    (self.timeAccuracy ?: [NSNull null]),
  ];
}
@end

@implementation DTGOperatorIdMessage
+ (instancetype)makeWithReceivedTimestamp:(NSNumber *)receivedTimestamp
    macAddress:(NSString *)macAddress
    source:(DTGMessageSource)source
    rssi:(nullable NSNumber *)rssi
    operatorId:(NSString *)operatorId {
  DTGOperatorIdMessage* pigeonResult = [[DTGOperatorIdMessage alloc] init];
  pigeonResult.receivedTimestamp = receivedTimestamp;
  pigeonResult.macAddress = macAddress;
  pigeonResult.source = source;
  pigeonResult.rssi = rssi;
  pigeonResult.operatorId = operatorId;
  return pigeonResult;
}
+ (DTGOperatorIdMessage *)fromList:(NSArray *)list {
  DTGOperatorIdMessage *pigeonResult = [[DTGOperatorIdMessage alloc] init];
  pigeonResult.receivedTimestamp = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.receivedTimestamp != nil, @"");
  pigeonResult.macAddress = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.macAddress != nil, @"");
  pigeonResult.source = [GetNullableObjectAtIndex(list, 2) integerValue];
  pigeonResult.rssi = GetNullableObjectAtIndex(list, 3);
  pigeonResult.operatorId = GetNullableObjectAtIndex(list, 4);
  NSAssert(pigeonResult.operatorId != nil, @"");
  return pigeonResult;
}
+ (nullable DTGOperatorIdMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [DTGOperatorIdMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.receivedTimestamp ?: [NSNull null]),
    (self.macAddress ?: [NSNull null]),
    @(self.source),
    (self.rssi ?: [NSNull null]),
    (self.operatorId ?: [NSNull null]),
  ];
}
@end

@implementation DTGAuthenticationMessage
+ (instancetype)makeWithReceivedTimestamp:(NSNumber *)receivedTimestamp
    macAddress:(NSString *)macAddress
    source:(DTGMessageSource)source
    rssi:(nullable NSNumber *)rssi
    authType:(DTGAuthType)authType
    authDataPage:(NSNumber *)authDataPage
    authLastPageIndex:(NSNumber *)authLastPageIndex
    authLength:(NSNumber *)authLength
    authTimestamp:(NSNumber *)authTimestamp
    authData:(NSString *)authData {
  DTGAuthenticationMessage* pigeonResult = [[DTGAuthenticationMessage alloc] init];
  pigeonResult.receivedTimestamp = receivedTimestamp;
  pigeonResult.macAddress = macAddress;
  pigeonResult.source = source;
  pigeonResult.rssi = rssi;
  pigeonResult.authType = authType;
  pigeonResult.authDataPage = authDataPage;
  pigeonResult.authLastPageIndex = authLastPageIndex;
  pigeonResult.authLength = authLength;
  pigeonResult.authTimestamp = authTimestamp;
  pigeonResult.authData = authData;
  return pigeonResult;
}
+ (DTGAuthenticationMessage *)fromList:(NSArray *)list {
  DTGAuthenticationMessage *pigeonResult = [[DTGAuthenticationMessage alloc] init];
  pigeonResult.receivedTimestamp = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.receivedTimestamp != nil, @"");
  pigeonResult.macAddress = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.macAddress != nil, @"");
  pigeonResult.source = [GetNullableObjectAtIndex(list, 2) integerValue];
  pigeonResult.rssi = GetNullableObjectAtIndex(list, 3);
  pigeonResult.authType = [GetNullableObjectAtIndex(list, 4) integerValue];
  pigeonResult.authDataPage = GetNullableObjectAtIndex(list, 5);
  NSAssert(pigeonResult.authDataPage != nil, @"");
  pigeonResult.authLastPageIndex = GetNullableObjectAtIndex(list, 6);
  NSAssert(pigeonResult.authLastPageIndex != nil, @"");
  pigeonResult.authLength = GetNullableObjectAtIndex(list, 7);
  NSAssert(pigeonResult.authLength != nil, @"");
  pigeonResult.authTimestamp = GetNullableObjectAtIndex(list, 8);
  NSAssert(pigeonResult.authTimestamp != nil, @"");
  pigeonResult.authData = GetNullableObjectAtIndex(list, 9);
  NSAssert(pigeonResult.authData != nil, @"");
  return pigeonResult;
}
+ (nullable DTGAuthenticationMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [DTGAuthenticationMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.receivedTimestamp ?: [NSNull null]),
    (self.macAddress ?: [NSNull null]),
    @(self.source),
    (self.rssi ?: [NSNull null]),
    @(self.authType),
    (self.authDataPage ?: [NSNull null]),
    (self.authLastPageIndex ?: [NSNull null]),
    (self.authLength ?: [NSNull null]),
    (self.authTimestamp ?: [NSNull null]),
    (self.authData ?: [NSNull null]),
  ];
}
@end

@implementation DTGSelfIdMessage
+ (instancetype)makeWithReceivedTimestamp:(NSNumber *)receivedTimestamp
    macAddress:(NSString *)macAddress
    source:(DTGMessageSource)source
    rssi:(nullable NSNumber *)rssi
    descriptionType:(NSNumber *)descriptionType
    operationDescription:(NSString *)operationDescription {
  DTGSelfIdMessage* pigeonResult = [[DTGSelfIdMessage alloc] init];
  pigeonResult.receivedTimestamp = receivedTimestamp;
  pigeonResult.macAddress = macAddress;
  pigeonResult.source = source;
  pigeonResult.rssi = rssi;
  pigeonResult.descriptionType = descriptionType;
  pigeonResult.operationDescription = operationDescription;
  return pigeonResult;
}
+ (DTGSelfIdMessage *)fromList:(NSArray *)list {
  DTGSelfIdMessage *pigeonResult = [[DTGSelfIdMessage alloc] init];
  pigeonResult.receivedTimestamp = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.receivedTimestamp != nil, @"");
  pigeonResult.macAddress = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.macAddress != nil, @"");
  pigeonResult.source = [GetNullableObjectAtIndex(list, 2) integerValue];
  pigeonResult.rssi = GetNullableObjectAtIndex(list, 3);
  pigeonResult.descriptionType = GetNullableObjectAtIndex(list, 4);
  NSAssert(pigeonResult.descriptionType != nil, @"");
  pigeonResult.operationDescription = GetNullableObjectAtIndex(list, 5);
  NSAssert(pigeonResult.operationDescription != nil, @"");
  return pigeonResult;
}
+ (nullable DTGSelfIdMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [DTGSelfIdMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.receivedTimestamp ?: [NSNull null]),
    (self.macAddress ?: [NSNull null]),
    @(self.source),
    (self.rssi ?: [NSNull null]),
    (self.descriptionType ?: [NSNull null]),
    (self.operationDescription ?: [NSNull null]),
  ];
}
@end

@implementation DTGSystemDataMessage
+ (instancetype)makeWithReceivedTimestamp:(NSNumber *)receivedTimestamp
    macAddress:(NSString *)macAddress
    source:(DTGMessageSource)source
    rssi:(nullable NSNumber *)rssi
    operatorLocationType:(DTGOperatorLocationType)operatorLocationType
    classificationType:(DTGClassificationType)classificationType
    operatorLatitude:(NSNumber *)operatorLatitude
    operatorLongitude:(NSNumber *)operatorLongitude
    areaCount:(NSNumber *)areaCount
    areaRadius:(NSNumber *)areaRadius
    areaCeiling:(NSNumber *)areaCeiling
    areaFloor:(NSNumber *)areaFloor
    category:(DTGAircraftCategory)category
    classValue:(DTGAircraftClass)classValue
    operatorAltitudeGeo:(NSNumber *)operatorAltitudeGeo {
  DTGSystemDataMessage* pigeonResult = [[DTGSystemDataMessage alloc] init];
  pigeonResult.receivedTimestamp = receivedTimestamp;
  pigeonResult.macAddress = macAddress;
  pigeonResult.source = source;
  pigeonResult.rssi = rssi;
  pigeonResult.operatorLocationType = operatorLocationType;
  pigeonResult.classificationType = classificationType;
  pigeonResult.operatorLatitude = operatorLatitude;
  pigeonResult.operatorLongitude = operatorLongitude;
  pigeonResult.areaCount = areaCount;
  pigeonResult.areaRadius = areaRadius;
  pigeonResult.areaCeiling = areaCeiling;
  pigeonResult.areaFloor = areaFloor;
  pigeonResult.category = category;
  pigeonResult.classValue = classValue;
  pigeonResult.operatorAltitudeGeo = operatorAltitudeGeo;
  return pigeonResult;
}
+ (DTGSystemDataMessage *)fromList:(NSArray *)list {
  DTGSystemDataMessage *pigeonResult = [[DTGSystemDataMessage alloc] init];
  pigeonResult.receivedTimestamp = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.receivedTimestamp != nil, @"");
  pigeonResult.macAddress = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.macAddress != nil, @"");
  pigeonResult.source = [GetNullableObjectAtIndex(list, 2) integerValue];
  pigeonResult.rssi = GetNullableObjectAtIndex(list, 3);
  pigeonResult.operatorLocationType = [GetNullableObjectAtIndex(list, 4) integerValue];
  pigeonResult.classificationType = [GetNullableObjectAtIndex(list, 5) integerValue];
  pigeonResult.operatorLatitude = GetNullableObjectAtIndex(list, 6);
  NSAssert(pigeonResult.operatorLatitude != nil, @"");
  pigeonResult.operatorLongitude = GetNullableObjectAtIndex(list, 7);
  NSAssert(pigeonResult.operatorLongitude != nil, @"");
  pigeonResult.areaCount = GetNullableObjectAtIndex(list, 8);
  NSAssert(pigeonResult.areaCount != nil, @"");
  pigeonResult.areaRadius = GetNullableObjectAtIndex(list, 9);
  NSAssert(pigeonResult.areaRadius != nil, @"");
  pigeonResult.areaCeiling = GetNullableObjectAtIndex(list, 10);
  NSAssert(pigeonResult.areaCeiling != nil, @"");
  pigeonResult.areaFloor = GetNullableObjectAtIndex(list, 11);
  NSAssert(pigeonResult.areaFloor != nil, @"");
  pigeonResult.category = [GetNullableObjectAtIndex(list, 12) integerValue];
  pigeonResult.classValue = [GetNullableObjectAtIndex(list, 13) integerValue];
  pigeonResult.operatorAltitudeGeo = GetNullableObjectAtIndex(list, 14);
  NSAssert(pigeonResult.operatorAltitudeGeo != nil, @"");
  return pigeonResult;
}
+ (nullable DTGSystemDataMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [DTGSystemDataMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.receivedTimestamp ?: [NSNull null]),
    (self.macAddress ?: [NSNull null]),
    @(self.source),
    (self.rssi ?: [NSNull null]),
    @(self.operatorLocationType),
    @(self.classificationType),
    (self.operatorLatitude ?: [NSNull null]),
    (self.operatorLongitude ?: [NSNull null]),
    (self.areaCount ?: [NSNull null]),
    (self.areaRadius ?: [NSNull null]),
    (self.areaCeiling ?: [NSNull null]),
    (self.areaFloor ?: [NSNull null]),
    @(self.category),
    @(self.classValue),
    (self.operatorAltitudeGeo ?: [NSNull null]),
  ];
}
@end

@implementation DTGConnectionMessage
+ (instancetype)makeWithReceivedTimestamp:(NSNumber *)receivedTimestamp
    macAddress:(NSString *)macAddress
    source:(DTGMessageSource)source
    rssi:(nullable NSNumber *)rssi
    transportType:(NSString *)transportType
    lastSeen:(NSNumber *)lastSeen
    firstSeen:(NSNumber *)firstSeen
    msgDelta:(NSNumber *)msgDelta {
  DTGConnectionMessage* pigeonResult = [[DTGConnectionMessage alloc] init];
  pigeonResult.receivedTimestamp = receivedTimestamp;
  pigeonResult.macAddress = macAddress;
  pigeonResult.source = source;
  pigeonResult.rssi = rssi;
  pigeonResult.transportType = transportType;
  pigeonResult.lastSeen = lastSeen;
  pigeonResult.firstSeen = firstSeen;
  pigeonResult.msgDelta = msgDelta;
  return pigeonResult;
}
+ (DTGConnectionMessage *)fromList:(NSArray *)list {
  DTGConnectionMessage *pigeonResult = [[DTGConnectionMessage alloc] init];
  pigeonResult.receivedTimestamp = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.receivedTimestamp != nil, @"");
  pigeonResult.macAddress = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.macAddress != nil, @"");
  pigeonResult.source = [GetNullableObjectAtIndex(list, 2) integerValue];
  pigeonResult.rssi = GetNullableObjectAtIndex(list, 3);
  pigeonResult.transportType = GetNullableObjectAtIndex(list, 4);
  NSAssert(pigeonResult.transportType != nil, @"");
  pigeonResult.lastSeen = GetNullableObjectAtIndex(list, 5);
  NSAssert(pigeonResult.lastSeen != nil, @"");
  pigeonResult.firstSeen = GetNullableObjectAtIndex(list, 6);
  NSAssert(pigeonResult.firstSeen != nil, @"");
  pigeonResult.msgDelta = GetNullableObjectAtIndex(list, 7);
  NSAssert(pigeonResult.msgDelta != nil, @"");
  return pigeonResult;
}
+ (nullable DTGConnectionMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [DTGConnectionMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.receivedTimestamp ?: [NSNull null]),
    (self.macAddress ?: [NSNull null]),
    @(self.source),
    (self.rssi ?: [NSNull null]),
    (self.transportType ?: [NSNull null]),
    (self.lastSeen ?: [NSNull null]),
    (self.firstSeen ?: [NSNull null]),
    (self.msgDelta ?: [NSNull null]),
  ];
}
@end

NSObject<FlutterMessageCodec> *DTGApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void DTGApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<DTGApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.Api.startScanBluetooth"
        binaryMessenger:binaryMessenger
        codec:DTGApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startScanBluetoothWithCompletion:)], @"DTGApi api (%@) doesn't respond to @selector(startScanBluetoothWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api startScanBluetoothWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.Api.startScanWifi"
        binaryMessenger:binaryMessenger
        codec:DTGApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startScanWifiWithCompletion:)], @"DTGApi api (%@) doesn't respond to @selector(startScanWifiWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api startScanWifiWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.Api.stopScanBluetooth"
        binaryMessenger:binaryMessenger
        codec:DTGApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopScanBluetoothWithCompletion:)], @"DTGApi api (%@) doesn't respond to @selector(stopScanBluetoothWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api stopScanBluetoothWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.Api.stopScanWifi"
        binaryMessenger:binaryMessenger
        codec:DTGApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopScanWifiWithCompletion:)], @"DTGApi api (%@) doesn't respond to @selector(stopScanWifiWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api stopScanWifiWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.Api.setBtScanPriority"
        binaryMessenger:binaryMessenger
        codec:DTGApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setBtScanPriorityPriority:completion:)], @"DTGApi api (%@) doesn't respond to @selector(setBtScanPriorityPriority:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        DTGScanPriority arg_priority = [GetNullableObjectAtIndex(args, 0) integerValue];
        [api setBtScanPriorityPriority:arg_priority completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.Api.isScanningBluetooth"
        binaryMessenger:binaryMessenger
        codec:DTGApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(isScanningBluetoothWithCompletion:)], @"DTGApi api (%@) doesn't respond to @selector(isScanningBluetoothWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api isScanningBluetoothWithCompletion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.Api.isScanningWifi"
        binaryMessenger:binaryMessenger
        codec:DTGApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(isScanningWifiWithCompletion:)], @"DTGApi api (%@) doesn't respond to @selector(isScanningWifiWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api isScanningWifiWithCompletion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.Api.bluetoothState"
        binaryMessenger:binaryMessenger
        codec:DTGApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(bluetoothStateWithCompletion:)], @"DTGApi api (%@) doesn't respond to @selector(bluetoothStateWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api bluetoothStateWithCompletion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.Api.wifiState"
        binaryMessenger:binaryMessenger
        codec:DTGApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(wifiStateWithCompletion:)], @"DTGApi api (%@) doesn't respond to @selector(wifiStateWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api wifiStateWithCompletion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.Api.btExtendedSupported"
        binaryMessenger:binaryMessenger
        codec:DTGApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(btExtendedSupportedWithCompletion:)], @"DTGApi api (%@) doesn't respond to @selector(btExtendedSupportedWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api btExtendedSupportedWithCompletion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.Api.btMaxAdvDataLen"
        binaryMessenger:binaryMessenger
        codec:DTGApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(btMaxAdvDataLenWithCompletion:)], @"DTGApi api (%@) doesn't respond to @selector(btMaxAdvDataLenWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api btMaxAdvDataLenWithCompletion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.Api.wifiNaNSupported"
        binaryMessenger:binaryMessenger
        codec:DTGApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(wifiNaNSupportedWithCompletion:)], @"DTGApi api (%@) doesn't respond to @selector(wifiNaNSupportedWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api wifiNaNSupportedWithCompletion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface DTGMessageApiCodecReader : FlutterStandardReader
@end
@implementation DTGMessageApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [DTGAuthenticationMessage fromList:[self readValue]];
    case 129: 
      return [DTGBasicIdMessage fromList:[self readValue]];
    case 130: 
      return [DTGConnectionMessage fromList:[self readValue]];
    case 131: 
      return [DTGLocationMessage fromList:[self readValue]];
    case 132: 
      return [DTGOperatorIdMessage fromList:[self readValue]];
    case 133: 
      return [DTGSelfIdMessage fromList:[self readValue]];
    case 134: 
      return [DTGSystemDataMessage fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface DTGMessageApiCodecWriter : FlutterStandardWriter
@end
@implementation DTGMessageApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[DTGAuthenticationMessage class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[DTGBasicIdMessage class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[DTGConnectionMessage class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[DTGLocationMessage class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[DTGOperatorIdMessage class]]) {
    [self writeByte:132];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[DTGSelfIdMessage class]]) {
    [self writeByte:133];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[DTGSystemDataMessage class]]) {
    [self writeByte:134];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface DTGMessageApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation DTGMessageApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[DTGMessageApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[DTGMessageApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *DTGMessageApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    DTGMessageApiCodecReaderWriter *readerWriter = [[DTGMessageApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void DTGMessageApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<DTGMessageApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.MessageApi.determineMessageType"
        binaryMessenger:binaryMessenger
        codec:DTGMessageApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(determineMessageTypePayload:offset:error:)], @"DTGMessageApi api (%@) doesn't respond to @selector(determineMessageTypePayload:offset:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_payload = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_offset = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        NSNumber *output = [api determineMessageTypePayload:arg_payload offset:arg_offset error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.MessageApi.fromBufferBasic"
        binaryMessenger:binaryMessenger
        codec:DTGMessageApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(fromBufferBasicPayload:offset:macAddress:error:)], @"DTGMessageApi api (%@) doesn't respond to @selector(fromBufferBasicPayload:offset:macAddress:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_payload = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_offset = GetNullableObjectAtIndex(args, 1);
        NSString *arg_macAddress = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        DTGBasicIdMessage *output = [api fromBufferBasicPayload:arg_payload offset:arg_offset macAddress:arg_macAddress error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.MessageApi.fromBufferLocation"
        binaryMessenger:binaryMessenger
        codec:DTGMessageApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(fromBufferLocationPayload:offset:macAddress:error:)], @"DTGMessageApi api (%@) doesn't respond to @selector(fromBufferLocationPayload:offset:macAddress:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_payload = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_offset = GetNullableObjectAtIndex(args, 1);
        NSString *arg_macAddress = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        DTGLocationMessage *output = [api fromBufferLocationPayload:arg_payload offset:arg_offset macAddress:arg_macAddress error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.MessageApi.fromBufferOperatorId"
        binaryMessenger:binaryMessenger
        codec:DTGMessageApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(fromBufferOperatorIdPayload:offset:macAddress:error:)], @"DTGMessageApi api (%@) doesn't respond to @selector(fromBufferOperatorIdPayload:offset:macAddress:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_payload = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_offset = GetNullableObjectAtIndex(args, 1);
        NSString *arg_macAddress = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        DTGOperatorIdMessage *output = [api fromBufferOperatorIdPayload:arg_payload offset:arg_offset macAddress:arg_macAddress error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.MessageApi.fromBufferSelfId"
        binaryMessenger:binaryMessenger
        codec:DTGMessageApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(fromBufferSelfIdPayload:offset:macAddress:error:)], @"DTGMessageApi api (%@) doesn't respond to @selector(fromBufferSelfIdPayload:offset:macAddress:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_payload = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_offset = GetNullableObjectAtIndex(args, 1);
        NSString *arg_macAddress = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        DTGSelfIdMessage *output = [api fromBufferSelfIdPayload:arg_payload offset:arg_offset macAddress:arg_macAddress error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.MessageApi.fromBufferAuthentication"
        binaryMessenger:binaryMessenger
        codec:DTGMessageApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(fromBufferAuthenticationPayload:offset:macAddress:error:)], @"DTGMessageApi api (%@) doesn't respond to @selector(fromBufferAuthenticationPayload:offset:macAddress:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_payload = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_offset = GetNullableObjectAtIndex(args, 1);
        NSString *arg_macAddress = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        DTGAuthenticationMessage *output = [api fromBufferAuthenticationPayload:arg_payload offset:arg_offset macAddress:arg_macAddress error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.MessageApi.fromBufferSystemData"
        binaryMessenger:binaryMessenger
        codec:DTGMessageApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(fromBufferSystemDataPayload:offset:macAddress:error:)], @"DTGMessageApi api (%@) doesn't respond to @selector(fromBufferSystemDataPayload:offset:macAddress:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_payload = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_offset = GetNullableObjectAtIndex(args, 1);
        NSString *arg_macAddress = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        DTGSystemDataMessage *output = [api fromBufferSystemDataPayload:arg_payload offset:arg_offset macAddress:arg_macAddress error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.MessageApi.fromBufferConnection"
        binaryMessenger:binaryMessenger
        codec:DTGMessageApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(fromBufferConnectionPayload:offset:macAddress:error:)], @"DTGMessageApi api (%@) doesn't respond to @selector(fromBufferConnectionPayload:offset:macAddress:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_payload = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_offset = GetNullableObjectAtIndex(args, 1);
        NSString *arg_macAddress = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        DTGConnectionMessage *output = [api fromBufferConnectionPayload:arg_payload offset:arg_offset macAddress:arg_macAddress error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
