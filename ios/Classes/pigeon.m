// Autogenerated from Pigeon (v1.0.18), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "pigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface DTGBasicIdMessage ()
+ (DTGBasicIdMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface DTGLocationMessage ()
+ (DTGLocationMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface DTGOperatorIdMessage ()
+ (DTGOperatorIdMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface DTGAuthenticationMessage ()
+ (DTGAuthenticationMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface DTGSelfIdMessage ()
+ (DTGSelfIdMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface DTGSystemDataMessage ()
+ (DTGSystemDataMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface DTGConnectionMessage ()
+ (DTGConnectionMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation DTGBasicIdMessage
+ (instancetype)makeWithReceivedTimestamp:(NSNumber *)receivedTimestamp
    macAddress:(NSString *)macAddress
    source:(DTGMessageSource)source
    rssi:(nullable NSNumber *)rssi
    uasId:(NSString *)uasId
    idType:(DTGIdType)idType
    uaType:(DTGUaType)uaType {
  DTGBasicIdMessage* pigeonResult = [[DTGBasicIdMessage alloc] init];
  pigeonResult.receivedTimestamp = receivedTimestamp;
  pigeonResult.macAddress = macAddress;
  pigeonResult.source = source;
  pigeonResult.rssi = rssi;
  pigeonResult.uasId = uasId;
  pigeonResult.idType = idType;
  pigeonResult.uaType = uaType;
  return pigeonResult;
}
+ (DTGBasicIdMessage *)fromMap:(NSDictionary *)dict {
  DTGBasicIdMessage *pigeonResult = [[DTGBasicIdMessage alloc] init];
  pigeonResult.receivedTimestamp = GetNullableObject(dict, @"receivedTimestamp");
  NSAssert(pigeonResult.receivedTimestamp != nil, @"");
  pigeonResult.macAddress = GetNullableObject(dict, @"macAddress");
  NSAssert(pigeonResult.macAddress != nil, @"");
  pigeonResult.source = [GetNullableObject(dict, @"source") integerValue];
  pigeonResult.rssi = GetNullableObject(dict, @"rssi");
  pigeonResult.uasId = GetNullableObject(dict, @"uasId");
  NSAssert(pigeonResult.uasId != nil, @"");
  pigeonResult.idType = [GetNullableObject(dict, @"idType") integerValue];
  pigeonResult.uaType = [GetNullableObject(dict, @"uaType") integerValue];
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.receivedTimestamp ? self.receivedTimestamp : [NSNull null]), @"receivedTimestamp", (self.macAddress ? self.macAddress : [NSNull null]), @"macAddress", @(self.source), @"source", (self.rssi ? self.rssi : [NSNull null]), @"rssi", (self.uasId ? self.uasId : [NSNull null]), @"uasId", @(self.idType), @"idType", @(self.uaType), @"uaType", nil];
}
@end

@implementation DTGLocationMessage
+ (instancetype)makeWithReceivedTimestamp:(NSNumber *)receivedTimestamp
    macAddress:(NSString *)macAddress
    source:(DTGMessageSource)source
    rssi:(nullable NSNumber *)rssi
    status:(DTGAircraftStatus)status
    heightType:(DTGHeightType)heightType
    direction:(nullable NSNumber *)direction
    speedHorizontal:(nullable NSNumber *)speedHorizontal
    speedVertical:(nullable NSNumber *)speedVertical
    latitude:(nullable NSNumber *)latitude
    longitude:(nullable NSNumber *)longitude
    altitudePressure:(nullable NSNumber *)altitudePressure
    altitudeGeodetic:(nullable NSNumber *)altitudeGeodetic
    height:(nullable NSNumber *)height
    horizontalAccuracy:(DTGHorizontalAccuracy)horizontalAccuracy
    verticalAccuracy:(DTGVerticalAccuracy)verticalAccuracy
    baroAccuracy:(DTGVerticalAccuracy)baroAccuracy
    speedAccuracy:(DTGSpeedAccuracy)speedAccuracy
    time:(nullable NSNumber *)time
    timeAccuracy:(nullable NSNumber *)timeAccuracy {
  DTGLocationMessage* pigeonResult = [[DTGLocationMessage alloc] init];
  pigeonResult.receivedTimestamp = receivedTimestamp;
  pigeonResult.macAddress = macAddress;
  pigeonResult.source = source;
  pigeonResult.rssi = rssi;
  pigeonResult.status = status;
  pigeonResult.heightType = heightType;
  pigeonResult.direction = direction;
  pigeonResult.speedHorizontal = speedHorizontal;
  pigeonResult.speedVertical = speedVertical;
  pigeonResult.latitude = latitude;
  pigeonResult.longitude = longitude;
  pigeonResult.altitudePressure = altitudePressure;
  pigeonResult.altitudeGeodetic = altitudeGeodetic;
  pigeonResult.height = height;
  pigeonResult.horizontalAccuracy = horizontalAccuracy;
  pigeonResult.verticalAccuracy = verticalAccuracy;
  pigeonResult.baroAccuracy = baroAccuracy;
  pigeonResult.speedAccuracy = speedAccuracy;
  pigeonResult.time = time;
  pigeonResult.timeAccuracy = timeAccuracy;
  return pigeonResult;
}
+ (DTGLocationMessage *)fromMap:(NSDictionary *)dict {
  DTGLocationMessage *pigeonResult = [[DTGLocationMessage alloc] init];
  pigeonResult.receivedTimestamp = GetNullableObject(dict, @"receivedTimestamp");
  NSAssert(pigeonResult.receivedTimestamp != nil, @"");
  pigeonResult.macAddress = GetNullableObject(dict, @"macAddress");
  NSAssert(pigeonResult.macAddress != nil, @"");
  pigeonResult.source = [GetNullableObject(dict, @"source") integerValue];
  pigeonResult.rssi = GetNullableObject(dict, @"rssi");
  pigeonResult.status = [GetNullableObject(dict, @"status") integerValue];
  pigeonResult.heightType = [GetNullableObject(dict, @"heightType") integerValue];
  pigeonResult.direction = GetNullableObject(dict, @"direction");
  pigeonResult.speedHorizontal = GetNullableObject(dict, @"speedHorizontal");
  pigeonResult.speedVertical = GetNullableObject(dict, @"speedVertical");
  pigeonResult.latitude = GetNullableObject(dict, @"latitude");
  pigeonResult.longitude = GetNullableObject(dict, @"longitude");
  pigeonResult.altitudePressure = GetNullableObject(dict, @"altitudePressure");
  pigeonResult.altitudeGeodetic = GetNullableObject(dict, @"altitudeGeodetic");
  pigeonResult.height = GetNullableObject(dict, @"height");
  pigeonResult.horizontalAccuracy = [GetNullableObject(dict, @"horizontalAccuracy") integerValue];
  pigeonResult.verticalAccuracy = [GetNullableObject(dict, @"verticalAccuracy") integerValue];
  pigeonResult.baroAccuracy = [GetNullableObject(dict, @"baroAccuracy") integerValue];
  pigeonResult.speedAccuracy = [GetNullableObject(dict, @"speedAccuracy") integerValue];
  pigeonResult.time = GetNullableObject(dict, @"time");
  pigeonResult.timeAccuracy = GetNullableObject(dict, @"timeAccuracy");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.receivedTimestamp ? self.receivedTimestamp : [NSNull null]), @"receivedTimestamp", (self.macAddress ? self.macAddress : [NSNull null]), @"macAddress", @(self.source), @"source", (self.rssi ? self.rssi : [NSNull null]), @"rssi", @(self.status), @"status", @(self.heightType), @"heightType", (self.direction ? self.direction : [NSNull null]), @"direction", (self.speedHorizontal ? self.speedHorizontal : [NSNull null]), @"speedHorizontal", (self.speedVertical ? self.speedVertical : [NSNull null]), @"speedVertical", (self.latitude ? self.latitude : [NSNull null]), @"latitude", (self.longitude ? self.longitude : [NSNull null]), @"longitude", (self.altitudePressure ? self.altitudePressure : [NSNull null]), @"altitudePressure", (self.altitudeGeodetic ? self.altitudeGeodetic : [NSNull null]), @"altitudeGeodetic", (self.height ? self.height : [NSNull null]), @"height", @(self.horizontalAccuracy), @"horizontalAccuracy", @(self.verticalAccuracy), @"verticalAccuracy", @(self.baroAccuracy), @"baroAccuracy", @(self.speedAccuracy), @"speedAccuracy", (self.time ? self.time : [NSNull null]), @"time", (self.timeAccuracy ? self.timeAccuracy : [NSNull null]), @"timeAccuracy", nil];
}
@end

@implementation DTGOperatorIdMessage
+ (instancetype)makeWithReceivedTimestamp:(NSNumber *)receivedTimestamp
    macAddress:(NSString *)macAddress
    source:(DTGMessageSource)source
    rssi:(nullable NSNumber *)rssi
    operatorId:(NSString *)operatorId {
  DTGOperatorIdMessage* pigeonResult = [[DTGOperatorIdMessage alloc] init];
  pigeonResult.receivedTimestamp = receivedTimestamp;
  pigeonResult.macAddress = macAddress;
  pigeonResult.source = source;
  pigeonResult.rssi = rssi;
  pigeonResult.operatorId = operatorId;
  return pigeonResult;
}
+ (DTGOperatorIdMessage *)fromMap:(NSDictionary *)dict {
  DTGOperatorIdMessage *pigeonResult = [[DTGOperatorIdMessage alloc] init];
  pigeonResult.receivedTimestamp = GetNullableObject(dict, @"receivedTimestamp");
  NSAssert(pigeonResult.receivedTimestamp != nil, @"");
  pigeonResult.macAddress = GetNullableObject(dict, @"macAddress");
  NSAssert(pigeonResult.macAddress != nil, @"");
  pigeonResult.source = [GetNullableObject(dict, @"source") integerValue];
  pigeonResult.rssi = GetNullableObject(dict, @"rssi");
  pigeonResult.operatorId = GetNullableObject(dict, @"operatorId");
  NSAssert(pigeonResult.operatorId != nil, @"");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.receivedTimestamp ? self.receivedTimestamp : [NSNull null]), @"receivedTimestamp", (self.macAddress ? self.macAddress : [NSNull null]), @"macAddress", @(self.source), @"source", (self.rssi ? self.rssi : [NSNull null]), @"rssi", (self.operatorId ? self.operatorId : [NSNull null]), @"operatorId", nil];
}
@end

@implementation DTGAuthenticationMessage
+ (instancetype)makeWithReceivedTimestamp:(NSNumber *)receivedTimestamp
    macAddress:(NSString *)macAddress
    source:(DTGMessageSource)source
    rssi:(nullable NSNumber *)rssi
    authType:(DTGAuthType)authType
    authDataPage:(NSNumber *)authDataPage
    authLastPageIndex:(NSNumber *)authLastPageIndex
    authLength:(NSNumber *)authLength
    authTimestamp:(NSNumber *)authTimestamp
    authData:(NSString *)authData {
  DTGAuthenticationMessage* pigeonResult = [[DTGAuthenticationMessage alloc] init];
  pigeonResult.receivedTimestamp = receivedTimestamp;
  pigeonResult.macAddress = macAddress;
  pigeonResult.source = source;
  pigeonResult.rssi = rssi;
  pigeonResult.authType = authType;
  pigeonResult.authDataPage = authDataPage;
  pigeonResult.authLastPageIndex = authLastPageIndex;
  pigeonResult.authLength = authLength;
  pigeonResult.authTimestamp = authTimestamp;
  pigeonResult.authData = authData;
  return pigeonResult;
}
+ (DTGAuthenticationMessage *)fromMap:(NSDictionary *)dict {
  DTGAuthenticationMessage *pigeonResult = [[DTGAuthenticationMessage alloc] init];
  pigeonResult.receivedTimestamp = GetNullableObject(dict, @"receivedTimestamp");
  NSAssert(pigeonResult.receivedTimestamp != nil, @"");
  pigeonResult.macAddress = GetNullableObject(dict, @"macAddress");
  NSAssert(pigeonResult.macAddress != nil, @"");
  pigeonResult.source = [GetNullableObject(dict, @"source") integerValue];
  pigeonResult.rssi = GetNullableObject(dict, @"rssi");
  pigeonResult.authType = [GetNullableObject(dict, @"authType") integerValue];
  pigeonResult.authDataPage = GetNullableObject(dict, @"authDataPage");
  NSAssert(pigeonResult.authDataPage != nil, @"");
  pigeonResult.authLastPageIndex = GetNullableObject(dict, @"authLastPageIndex");
  NSAssert(pigeonResult.authLastPageIndex != nil, @"");
  pigeonResult.authLength = GetNullableObject(dict, @"authLength");
  NSAssert(pigeonResult.authLength != nil, @"");
  pigeonResult.authTimestamp = GetNullableObject(dict, @"authTimestamp");
  NSAssert(pigeonResult.authTimestamp != nil, @"");
  pigeonResult.authData = GetNullableObject(dict, @"authData");
  NSAssert(pigeonResult.authData != nil, @"");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.receivedTimestamp ? self.receivedTimestamp : [NSNull null]), @"receivedTimestamp", (self.macAddress ? self.macAddress : [NSNull null]), @"macAddress", @(self.source), @"source", (self.rssi ? self.rssi : [NSNull null]), @"rssi", @(self.authType), @"authType", (self.authDataPage ? self.authDataPage : [NSNull null]), @"authDataPage", (self.authLastPageIndex ? self.authLastPageIndex : [NSNull null]), @"authLastPageIndex", (self.authLength ? self.authLength : [NSNull null]), @"authLength", (self.authTimestamp ? self.authTimestamp : [NSNull null]), @"authTimestamp", (self.authData ? self.authData : [NSNull null]), @"authData", nil];
}
@end

@implementation DTGSelfIdMessage
+ (instancetype)makeWithReceivedTimestamp:(NSNumber *)receivedTimestamp
    macAddress:(NSString *)macAddress
    source:(DTGMessageSource)source
    rssi:(nullable NSNumber *)rssi
    descriptionType:(NSNumber *)descriptionType
    operationDescription:(NSString *)operationDescription {
  DTGSelfIdMessage* pigeonResult = [[DTGSelfIdMessage alloc] init];
  pigeonResult.receivedTimestamp = receivedTimestamp;
  pigeonResult.macAddress = macAddress;
  pigeonResult.source = source;
  pigeonResult.rssi = rssi;
  pigeonResult.descriptionType = descriptionType;
  pigeonResult.operationDescription = operationDescription;
  return pigeonResult;
}
+ (DTGSelfIdMessage *)fromMap:(NSDictionary *)dict {
  DTGSelfIdMessage *pigeonResult = [[DTGSelfIdMessage alloc] init];
  pigeonResult.receivedTimestamp = GetNullableObject(dict, @"receivedTimestamp");
  NSAssert(pigeonResult.receivedTimestamp != nil, @"");
  pigeonResult.macAddress = GetNullableObject(dict, @"macAddress");
  NSAssert(pigeonResult.macAddress != nil, @"");
  pigeonResult.source = [GetNullableObject(dict, @"source") integerValue];
  pigeonResult.rssi = GetNullableObject(dict, @"rssi");
  pigeonResult.descriptionType = GetNullableObject(dict, @"descriptionType");
  NSAssert(pigeonResult.descriptionType != nil, @"");
  pigeonResult.operationDescription = GetNullableObject(dict, @"operationDescription");
  NSAssert(pigeonResult.operationDescription != nil, @"");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.receivedTimestamp ? self.receivedTimestamp : [NSNull null]), @"receivedTimestamp", (self.macAddress ? self.macAddress : [NSNull null]), @"macAddress", @(self.source), @"source", (self.rssi ? self.rssi : [NSNull null]), @"rssi", (self.descriptionType ? self.descriptionType : [NSNull null]), @"descriptionType", (self.operationDescription ? self.operationDescription : [NSNull null]), @"operationDescription", nil];
}
@end

@implementation DTGSystemDataMessage
+ (instancetype)makeWithReceivedTimestamp:(NSNumber *)receivedTimestamp
    macAddress:(NSString *)macAddress
    source:(DTGMessageSource)source
    rssi:(nullable NSNumber *)rssi
    operatorLocationType:(DTGOperatorLocationType)operatorLocationType
    classificationType:(DTGClassificationType)classificationType
    operatorLatitude:(NSNumber *)operatorLatitude
    operatorLongitude:(NSNumber *)operatorLongitude
    areaCount:(NSNumber *)areaCount
    areaRadius:(NSNumber *)areaRadius
    areaCeiling:(NSNumber *)areaCeiling
    areaFloor:(NSNumber *)areaFloor
    category:(DTGAircraftCategory)category
    classValue:(DTGAircraftClass)classValue
    operatorAltitudeGeo:(NSNumber *)operatorAltitudeGeo {
  DTGSystemDataMessage* pigeonResult = [[DTGSystemDataMessage alloc] init];
  pigeonResult.receivedTimestamp = receivedTimestamp;
  pigeonResult.macAddress = macAddress;
  pigeonResult.source = source;
  pigeonResult.rssi = rssi;
  pigeonResult.operatorLocationType = operatorLocationType;
  pigeonResult.classificationType = classificationType;
  pigeonResult.operatorLatitude = operatorLatitude;
  pigeonResult.operatorLongitude = operatorLongitude;
  pigeonResult.areaCount = areaCount;
  pigeonResult.areaRadius = areaRadius;
  pigeonResult.areaCeiling = areaCeiling;
  pigeonResult.areaFloor = areaFloor;
  pigeonResult.category = category;
  pigeonResult.classValue = classValue;
  pigeonResult.operatorAltitudeGeo = operatorAltitudeGeo;
  return pigeonResult;
}
+ (DTGSystemDataMessage *)fromMap:(NSDictionary *)dict {
  DTGSystemDataMessage *pigeonResult = [[DTGSystemDataMessage alloc] init];
  pigeonResult.receivedTimestamp = GetNullableObject(dict, @"receivedTimestamp");
  NSAssert(pigeonResult.receivedTimestamp != nil, @"");
  pigeonResult.macAddress = GetNullableObject(dict, @"macAddress");
  NSAssert(pigeonResult.macAddress != nil, @"");
  pigeonResult.source = [GetNullableObject(dict, @"source") integerValue];
  pigeonResult.rssi = GetNullableObject(dict, @"rssi");
  pigeonResult.operatorLocationType = [GetNullableObject(dict, @"operatorLocationType") integerValue];
  pigeonResult.classificationType = [GetNullableObject(dict, @"classificationType") integerValue];
  pigeonResult.operatorLatitude = GetNullableObject(dict, @"operatorLatitude");
  NSAssert(pigeonResult.operatorLatitude != nil, @"");
  pigeonResult.operatorLongitude = GetNullableObject(dict, @"operatorLongitude");
  NSAssert(pigeonResult.operatorLongitude != nil, @"");
  pigeonResult.areaCount = GetNullableObject(dict, @"areaCount");
  NSAssert(pigeonResult.areaCount != nil, @"");
  pigeonResult.areaRadius = GetNullableObject(dict, @"areaRadius");
  NSAssert(pigeonResult.areaRadius != nil, @"");
  pigeonResult.areaCeiling = GetNullableObject(dict, @"areaCeiling");
  NSAssert(pigeonResult.areaCeiling != nil, @"");
  pigeonResult.areaFloor = GetNullableObject(dict, @"areaFloor");
  NSAssert(pigeonResult.areaFloor != nil, @"");
  pigeonResult.category = [GetNullableObject(dict, @"category") integerValue];
  pigeonResult.classValue = [GetNullableObject(dict, @"classValue") integerValue];
  pigeonResult.operatorAltitudeGeo = GetNullableObject(dict, @"operatorAltitudeGeo");
  NSAssert(pigeonResult.operatorAltitudeGeo != nil, @"");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.receivedTimestamp ? self.receivedTimestamp : [NSNull null]), @"receivedTimestamp", (self.macAddress ? self.macAddress : [NSNull null]), @"macAddress", @(self.source), @"source", (self.rssi ? self.rssi : [NSNull null]), @"rssi", @(self.operatorLocationType), @"operatorLocationType", @(self.classificationType), @"classificationType", (self.operatorLatitude ? self.operatorLatitude : [NSNull null]), @"operatorLatitude", (self.operatorLongitude ? self.operatorLongitude : [NSNull null]), @"operatorLongitude", (self.areaCount ? self.areaCount : [NSNull null]), @"areaCount", (self.areaRadius ? self.areaRadius : [NSNull null]), @"areaRadius", (self.areaCeiling ? self.areaCeiling : [NSNull null]), @"areaCeiling", (self.areaFloor ? self.areaFloor : [NSNull null]), @"areaFloor", @(self.category), @"category", @(self.classValue), @"classValue", (self.operatorAltitudeGeo ? self.operatorAltitudeGeo : [NSNull null]), @"operatorAltitudeGeo", nil];
}
@end

@implementation DTGConnectionMessage
+ (instancetype)makeWithReceivedTimestamp:(NSNumber *)receivedTimestamp
    macAddress:(NSString *)macAddress
    source:(DTGMessageSource)source
    rssi:(nullable NSNumber *)rssi
    transportType:(NSString *)transportType
    lastSeen:(NSNumber *)lastSeen
    firstSeen:(NSNumber *)firstSeen
    msgDelta:(NSNumber *)msgDelta {
  DTGConnectionMessage* pigeonResult = [[DTGConnectionMessage alloc] init];
  pigeonResult.receivedTimestamp = receivedTimestamp;
  pigeonResult.macAddress = macAddress;
  pigeonResult.source = source;
  pigeonResult.rssi = rssi;
  pigeonResult.transportType = transportType;
  pigeonResult.lastSeen = lastSeen;
  pigeonResult.firstSeen = firstSeen;
  pigeonResult.msgDelta = msgDelta;
  return pigeonResult;
}
+ (DTGConnectionMessage *)fromMap:(NSDictionary *)dict {
  DTGConnectionMessage *pigeonResult = [[DTGConnectionMessage alloc] init];
  pigeonResult.receivedTimestamp = GetNullableObject(dict, @"receivedTimestamp");
  NSAssert(pigeonResult.receivedTimestamp != nil, @"");
  pigeonResult.macAddress = GetNullableObject(dict, @"macAddress");
  NSAssert(pigeonResult.macAddress != nil, @"");
  pigeonResult.source = [GetNullableObject(dict, @"source") integerValue];
  pigeonResult.rssi = GetNullableObject(dict, @"rssi");
  pigeonResult.transportType = GetNullableObject(dict, @"transportType");
  NSAssert(pigeonResult.transportType != nil, @"");
  pigeonResult.lastSeen = GetNullableObject(dict, @"lastSeen");
  NSAssert(pigeonResult.lastSeen != nil, @"");
  pigeonResult.firstSeen = GetNullableObject(dict, @"firstSeen");
  NSAssert(pigeonResult.firstSeen != nil, @"");
  pigeonResult.msgDelta = GetNullableObject(dict, @"msgDelta");
  NSAssert(pigeonResult.msgDelta != nil, @"");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.receivedTimestamp ? self.receivedTimestamp : [NSNull null]), @"receivedTimestamp", (self.macAddress ? self.macAddress : [NSNull null]), @"macAddress", @(self.source), @"source", (self.rssi ? self.rssi : [NSNull null]), @"rssi", (self.transportType ? self.transportType : [NSNull null]), @"transportType", (self.lastSeen ? self.lastSeen : [NSNull null]), @"lastSeen", (self.firstSeen ? self.firstSeen : [NSNull null]), @"firstSeen", (self.msgDelta ? self.msgDelta : [NSNull null]), @"msgDelta", nil];
}
@end

@interface DTGApiCodecReader : FlutterStandardReader
@end
@implementation DTGApiCodecReader
@end

@interface DTGApiCodecWriter : FlutterStandardWriter
@end
@implementation DTGApiCodecWriter
@end

@interface DTGApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation DTGApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[DTGApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[DTGApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *DTGApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    DTGApiCodecReaderWriter *readerWriter = [[DTGApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void DTGApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<DTGApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.Api.startScanBluetooth"
        binaryMessenger:binaryMessenger
        codec:DTGApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startScanBluetoothWithCompletion:)], @"DTGApi api (%@) doesn't respond to @selector(startScanBluetoothWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api startScanBluetoothWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.Api.startScanWifi"
        binaryMessenger:binaryMessenger
        codec:DTGApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startScanWifiWithCompletion:)], @"DTGApi api (%@) doesn't respond to @selector(startScanWifiWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api startScanWifiWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.Api.stopScanBluetooth"
        binaryMessenger:binaryMessenger
        codec:DTGApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopScanBluetoothWithCompletion:)], @"DTGApi api (%@) doesn't respond to @selector(stopScanBluetoothWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api stopScanBluetoothWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.Api.stopScanWifi"
        binaryMessenger:binaryMessenger
        codec:DTGApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopScanWifiWithCompletion:)], @"DTGApi api (%@) doesn't respond to @selector(stopScanWifiWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api stopScanWifiWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.Api.setAutorestartBluetooth"
        binaryMessenger:binaryMessenger
        codec:DTGApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setAutorestartBluetoothEnable:completion:)], @"DTGApi api (%@) doesn't respond to @selector(setAutorestartBluetoothEnable:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_enable = args[0];
        [api setAutorestartBluetoothEnable:arg_enable completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.Api.isScanningBluetooth"
        binaryMessenger:binaryMessenger
        codec:DTGApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(isScanningBluetoothWithCompletion:)], @"DTGApi api (%@) doesn't respond to @selector(isScanningBluetoothWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api isScanningBluetoothWithCompletion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.Api.isScanningWifi"
        binaryMessenger:binaryMessenger
        codec:DTGApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(isScanningWifiWithCompletion:)], @"DTGApi api (%@) doesn't respond to @selector(isScanningWifiWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api isScanningWifiWithCompletion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.Api.bluetoothState"
        binaryMessenger:binaryMessenger
        codec:DTGApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(bluetoothStateWithCompletion:)], @"DTGApi api (%@) doesn't respond to @selector(bluetoothStateWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api bluetoothStateWithCompletion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface DTGMessageApiCodecReader : FlutterStandardReader
@end
@implementation DTGMessageApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [DTGAuthenticationMessage fromMap:[self readValue]];
    
    case 129:     
      return [DTGBasicIdMessage fromMap:[self readValue]];
    
    case 130:     
      return [DTGConnectionMessage fromMap:[self readValue]];
    
    case 131:     
      return [DTGLocationMessage fromMap:[self readValue]];
    
    case 132:     
      return [DTGOperatorIdMessage fromMap:[self readValue]];
    
    case 133:     
      return [DTGSelfIdMessage fromMap:[self readValue]];
    
    case 134:     
      return [DTGSystemDataMessage fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface DTGMessageApiCodecWriter : FlutterStandardWriter
@end
@implementation DTGMessageApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[DTGAuthenticationMessage class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[DTGBasicIdMessage class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[DTGConnectionMessage class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[DTGLocationMessage class]]) {
    [self writeByte:131];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[DTGOperatorIdMessage class]]) {
    [self writeByte:132];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[DTGSelfIdMessage class]]) {
    [self writeByte:133];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[DTGSystemDataMessage class]]) {
    [self writeByte:134];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface DTGMessageApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation DTGMessageApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[DTGMessageApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[DTGMessageApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *DTGMessageApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    DTGMessageApiCodecReaderWriter *readerWriter = [[DTGMessageApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void DTGMessageApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<DTGMessageApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.MessageApi.determineMessageType"
        binaryMessenger:binaryMessenger
        codec:DTGMessageApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(determineMessageTypePayload:offset:error:)], @"DTGMessageApi api (%@) doesn't respond to @selector(determineMessageTypePayload:offset:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_payload = args[0];
        NSNumber *arg_offset = args[1];
        FlutterError *error;
        NSNumber *output = [api determineMessageTypePayload:arg_payload offset:arg_offset error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.MessageApi.fromBufferBasic"
        binaryMessenger:binaryMessenger
        codec:DTGMessageApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(fromBufferBasicPayload:offset:macAddress:error:)], @"DTGMessageApi api (%@) doesn't respond to @selector(fromBufferBasicPayload:offset:macAddress:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_payload = args[0];
        NSNumber *arg_offset = args[1];
        NSString *arg_macAddress = args[2];
        FlutterError *error;
        DTGBasicIdMessage *output = [api fromBufferBasicPayload:arg_payload offset:arg_offset macAddress:arg_macAddress error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.MessageApi.fromBufferLocation"
        binaryMessenger:binaryMessenger
        codec:DTGMessageApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(fromBufferLocationPayload:offset:macAddress:error:)], @"DTGMessageApi api (%@) doesn't respond to @selector(fromBufferLocationPayload:offset:macAddress:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_payload = args[0];
        NSNumber *arg_offset = args[1];
        NSString *arg_macAddress = args[2];
        FlutterError *error;
        DTGLocationMessage *output = [api fromBufferLocationPayload:arg_payload offset:arg_offset macAddress:arg_macAddress error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.MessageApi.fromBufferOperatorId"
        binaryMessenger:binaryMessenger
        codec:DTGMessageApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(fromBufferOperatorIdPayload:offset:macAddress:error:)], @"DTGMessageApi api (%@) doesn't respond to @selector(fromBufferOperatorIdPayload:offset:macAddress:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_payload = args[0];
        NSNumber *arg_offset = args[1];
        NSString *arg_macAddress = args[2];
        FlutterError *error;
        DTGOperatorIdMessage *output = [api fromBufferOperatorIdPayload:arg_payload offset:arg_offset macAddress:arg_macAddress error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.MessageApi.fromBufferSelfId"
        binaryMessenger:binaryMessenger
        codec:DTGMessageApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(fromBufferSelfIdPayload:offset:macAddress:error:)], @"DTGMessageApi api (%@) doesn't respond to @selector(fromBufferSelfIdPayload:offset:macAddress:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_payload = args[0];
        NSNumber *arg_offset = args[1];
        NSString *arg_macAddress = args[2];
        FlutterError *error;
        DTGSelfIdMessage *output = [api fromBufferSelfIdPayload:arg_payload offset:arg_offset macAddress:arg_macAddress error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.MessageApi.fromBufferAuthentication"
        binaryMessenger:binaryMessenger
        codec:DTGMessageApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(fromBufferAuthenticationPayload:offset:macAddress:error:)], @"DTGMessageApi api (%@) doesn't respond to @selector(fromBufferAuthenticationPayload:offset:macAddress:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_payload = args[0];
        NSNumber *arg_offset = args[1];
        NSString *arg_macAddress = args[2];
        FlutterError *error;
        DTGAuthenticationMessage *output = [api fromBufferAuthenticationPayload:arg_payload offset:arg_offset macAddress:arg_macAddress error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.MessageApi.fromBufferSystemData"
        binaryMessenger:binaryMessenger
        codec:DTGMessageApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(fromBufferSystemDataPayload:offset:macAddress:error:)], @"DTGMessageApi api (%@) doesn't respond to @selector(fromBufferSystemDataPayload:offset:macAddress:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_payload = args[0];
        NSNumber *arg_offset = args[1];
        NSString *arg_macAddress = args[2];
        FlutterError *error;
        DTGSystemDataMessage *output = [api fromBufferSystemDataPayload:arg_payload offset:arg_offset macAddress:arg_macAddress error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.MessageApi.fromBufferConnection"
        binaryMessenger:binaryMessenger
        codec:DTGMessageApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(fromBufferConnectionPayload:offset:macAddress:error:)], @"DTGMessageApi api (%@) doesn't respond to @selector(fromBufferConnectionPayload:offset:macAddress:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_payload = args[0];
        NSNumber *arg_offset = args[1];
        NSString *arg_macAddress = args[2];
        FlutterError *error;
        DTGConnectionMessage *output = [api fromBufferConnectionPayload:arg_payload offset:arg_offset macAddress:arg_macAddress error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
