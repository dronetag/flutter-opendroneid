// Autogenerated from Pigeon (v3.2.9), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import <Foundation/Foundation.h>
@protocol FlutterBinaryMessenger;
@protocol FlutterMessageCodec;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN

typedef NS_ENUM(NSUInteger, DTGMessageType) {
  DTGMessageTypeBasicId = 0,
  DTGMessageTypeLocation = 1,
  DTGMessageTypeAuth = 2,
  DTGMessageTypeSelfId = 3,
  DTGMessageTypeSystem = 4,
  DTGMessageTypeOperatorId = 5,
  DTGMessageTypeMessagePack = 6,
};

typedef NS_ENUM(NSUInteger, DTGScanPriority) {
  DTGScanPriorityHigh = 0,
  DTGScanPriorityLow = 1,
};

typedef NS_ENUM(NSUInteger, DTGMessageSource) {
  DTGMessageSourceBluetoothLegacy = 0,
  DTGMessageSourceBluetoothLongRange = 1,
  DTGMessageSourceWifiNaN = 2,
  DTGMessageSourceWifiBeacon = 3,
  DTGMessageSourceUnknown = 4,
};

typedef NS_ENUM(NSUInteger, DTGIdType) {
  DTGIdTypeNone = 0,
  DTGIdTypeSerial_Number = 1,
  DTGIdTypeCAA_Registration_ID = 2,
  DTGIdTypeUTM_Assigned_ID = 3,
  DTGIdTypeSpecific_Session_ID = 4,
};

typedef NS_ENUM(NSUInteger, DTGUaType) {
  DTGUaTypeNone = 0,
  DTGUaTypeAeroplane = 1,
  DTGUaTypeHelicopter_or_Multirotor = 2,
  DTGUaTypeGyroplane = 3,
  DTGUaTypeHybrid_Lift = 4,
  DTGUaTypeOrnithopter = 5,
  DTGUaTypeGlider = 6,
  DTGUaTypeKite = 7,
  DTGUaTypeFree_balloon = 8,
  DTGUaTypeCaptive_balloon = 9,
  DTGUaTypeAirship = 10,
  DTGUaTypeFree_fall_parachute = 11,
  DTGUaTypeRocket = 12,
  DTGUaTypeTethered_powered_aircraft = 13,
  DTGUaTypeGround_obstacle = 14,
  DTGUaTypeOther = 15,
};

typedef NS_ENUM(NSUInteger, DTGAircraftStatus) {
  DTGAircraftStatusUndeclared = 0,
  DTGAircraftStatusGround = 1,
  DTGAircraftStatusAirborne = 2,
  DTGAircraftStatusEmergency = 3,
  DTGAircraftStatusRemote_ID_System_Failure = 4,
};

typedef NS_ENUM(NSUInteger, DTGHeightType) {
  DTGHeightTypeTakeoff = 0,
  DTGHeightTypeGround = 1,
};

typedef NS_ENUM(NSUInteger, DTGHorizontalAccuracy) {
  DTGHorizontalAccuracyUnknown = 0,
  DTGHorizontalAccuracyKilometers_18_52 = 1,
  DTGHorizontalAccuracyKilometers_7_408 = 2,
  DTGHorizontalAccuracyKilometers_3_704 = 3,
  DTGHorizontalAccuracyKilometers_1_852 = 4,
  DTGHorizontalAccuracyMeters_926 = 5,
  DTGHorizontalAccuracyMeters_555_6 = 6,
  DTGHorizontalAccuracyMeters_185_2 = 7,
  DTGHorizontalAccuracyMeters_92_6 = 8,
  DTGHorizontalAccuracyMeters_30 = 9,
  DTGHorizontalAccuracyMeters_10 = 10,
  DTGHorizontalAccuracyMeters_3 = 11,
  DTGHorizontalAccuracyMeters_1 = 12,
};

typedef NS_ENUM(NSUInteger, DTGVerticalAccuracy) {
  DTGVerticalAccuracyUnknown = 0,
  DTGVerticalAccuracyMeters_150 = 1,
  DTGVerticalAccuracyMeters_45 = 2,
  DTGVerticalAccuracyMeters_25 = 3,
  DTGVerticalAccuracyMeters_10 = 4,
  DTGVerticalAccuracyMeters_3 = 5,
  DTGVerticalAccuracyMeters_1 = 6,
};

typedef NS_ENUM(NSUInteger, DTGSpeedAccuracy) {
  DTGSpeedAccuracyUnknown = 0,
  DTGSpeedAccuracyMeter_per_second_10 = 1,
  DTGSpeedAccuracyMeter_per_second_3 = 2,
  DTGSpeedAccuracyMeter_per_second_1 = 3,
  DTGSpeedAccuracyMeter_per_second_0_3 = 4,
};

typedef NS_ENUM(NSUInteger, DTGBluetoothState) {
  DTGBluetoothStateUnknown = 0,
  DTGBluetoothStateResetting = 1,
  DTGBluetoothStateUnsupported = 2,
  DTGBluetoothStateUnauthorized = 3,
  DTGBluetoothStatePoweredOff = 4,
  DTGBluetoothStatePoweredOn = 5,
};

typedef NS_ENUM(NSUInteger, DTGWifiState) {
  DTGWifiStateDisabling = 0,
  DTGWifiStateDisabled = 1,
  DTGWifiStateEnabling = 2,
  DTGWifiStateEnabled = 3,
};

typedef NS_ENUM(NSUInteger, DTGAuthType) {
  DTGAuthTypeNone = 0,
  DTGAuthTypeUAS_ID_Signature = 1,
  DTGAuthTypeOperator_ID_Signature = 2,
  DTGAuthTypeMessage_Set_Signature = 3,
  DTGAuthTypeNetwork_Remote_ID = 4,
  DTGAuthTypeSpecific_Authentication = 5,
  DTGAuthTypePrivate_Use_0xA = 6,
  DTGAuthTypePrivate_Use_0xB = 7,
  DTGAuthTypePrivate_Use_0xC = 8,
  DTGAuthTypePrivate_Use_0xD = 9,
  DTGAuthTypePrivate_Use_0xE = 10,
  DTGAuthTypePrivate_Use_0xF = 11,
};

typedef NS_ENUM(NSUInteger, DTGAircraftCategory) {
  DTGAircraftCategoryUndeclared = 0,
  DTGAircraftCategoryEU_Open = 1,
  DTGAircraftCategoryEU_Specific = 2,
  DTGAircraftCategoryEU_Certified = 3,
};

typedef NS_ENUM(NSUInteger, DTGAircraftClass) {
  DTGAircraftClassUndeclared = 0,
  DTGAircraftClassEU_Class_0 = 1,
  DTGAircraftClassEU_Class_1 = 2,
  DTGAircraftClassEU_Class_2 = 3,
  DTGAircraftClassEU_Class_3 = 4,
  DTGAircraftClassEU_Class_4 = 5,
  DTGAircraftClassEU_Class_5 = 6,
  DTGAircraftClassEU_Class_6 = 7,
};

typedef NS_ENUM(NSUInteger, DTGOperatorLocationType) {
  DTGOperatorLocationTypeTakeOff = 0,
  DTGOperatorLocationTypeLiveGNSS = 1,
  DTGOperatorLocationTypeFixedLocation = 2,
  DTGOperatorLocationTypeInvalid = 3,
};

typedef NS_ENUM(NSUInteger, DTGClassificationType) {
  DTGClassificationTypeUndeclared = 0,
  DTGClassificationTypeEU = 1,
};

@class DTGBasicIdMessage;
@class DTGLocationMessage;
@class DTGOperatorIdMessage;
@class DTGAuthenticationMessage;
@class DTGSelfIdMessage;
@class DTGSystemDataMessage;
@class DTGConnectionMessage;

@interface DTGBasicIdMessage : NSObject
- (NSDictionary *)toMap;
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithReceivedTimestamp:(NSNumber *)receivedTimestamp
    macAddress:(NSString *)macAddress
    source:(DTGMessageSource)source
    rssi:(nullable NSNumber *)rssi
    uasId:(NSString *)uasId
    idType:(DTGIdType)idType
    uaType:(DTGUaType)uaType;
@property(nonatomic, strong) NSNumber * receivedTimestamp;
@property(nonatomic, copy) NSString * macAddress;
@property(nonatomic, assign) DTGMessageSource source;
@property(nonatomic, strong, nullable) NSNumber * rssi;
@property(nonatomic, copy) NSString * uasId;
@property(nonatomic, assign) DTGIdType idType;
@property(nonatomic, assign) DTGUaType uaType;
@end

@interface DTGLocationMessage : NSObject
- (NSDictionary *)toMap;
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithReceivedTimestamp:(NSNumber *)receivedTimestamp
    macAddress:(NSString *)macAddress
    source:(DTGMessageSource)source
    rssi:(nullable NSNumber *)rssi
    status:(DTGAircraftStatus)status
    heightType:(DTGHeightType)heightType
    direction:(nullable NSNumber *)direction
    speedHorizontal:(nullable NSNumber *)speedHorizontal
    speedVertical:(nullable NSNumber *)speedVertical
    latitude:(nullable NSNumber *)latitude
    longitude:(nullable NSNumber *)longitude
    altitudePressure:(nullable NSNumber *)altitudePressure
    altitudeGeodetic:(nullable NSNumber *)altitudeGeodetic
    height:(nullable NSNumber *)height
    horizontalAccuracy:(DTGHorizontalAccuracy)horizontalAccuracy
    verticalAccuracy:(DTGVerticalAccuracy)verticalAccuracy
    baroAccuracy:(DTGVerticalAccuracy)baroAccuracy
    speedAccuracy:(DTGSpeedAccuracy)speedAccuracy
    time:(nullable NSNumber *)time
    timeAccuracy:(nullable NSNumber *)timeAccuracy;
@property(nonatomic, strong) NSNumber * receivedTimestamp;
@property(nonatomic, copy) NSString * macAddress;
@property(nonatomic, assign) DTGMessageSource source;
@property(nonatomic, strong, nullable) NSNumber * rssi;
@property(nonatomic, assign) DTGAircraftStatus status;
@property(nonatomic, assign) DTGHeightType heightType;
@property(nonatomic, strong, nullable) NSNumber * direction;
@property(nonatomic, strong, nullable) NSNumber * speedHorizontal;
@property(nonatomic, strong, nullable) NSNumber * speedVertical;
@property(nonatomic, strong, nullable) NSNumber * latitude;
@property(nonatomic, strong, nullable) NSNumber * longitude;
@property(nonatomic, strong, nullable) NSNumber * altitudePressure;
@property(nonatomic, strong, nullable) NSNumber * altitudeGeodetic;
@property(nonatomic, strong, nullable) NSNumber * height;
@property(nonatomic, assign) DTGHorizontalAccuracy horizontalAccuracy;
@property(nonatomic, assign) DTGVerticalAccuracy verticalAccuracy;
@property(nonatomic, assign) DTGVerticalAccuracy baroAccuracy;
@property(nonatomic, assign) DTGSpeedAccuracy speedAccuracy;
@property(nonatomic, strong, nullable) NSNumber * time;
@property(nonatomic, strong, nullable) NSNumber * timeAccuracy;
@end

@interface DTGOperatorIdMessage : NSObject
- (NSDictionary *)toMap;
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithReceivedTimestamp:(NSNumber *)receivedTimestamp
    macAddress:(NSString *)macAddress
    source:(DTGMessageSource)source
    rssi:(nullable NSNumber *)rssi
    operatorId:(NSString *)operatorId;
@property(nonatomic, strong) NSNumber * receivedTimestamp;
@property(nonatomic, copy) NSString * macAddress;
@property(nonatomic, assign) DTGMessageSource source;
@property(nonatomic, strong, nullable) NSNumber * rssi;
@property(nonatomic, copy) NSString * operatorId;
@end

@interface DTGAuthenticationMessage : NSObject
- (NSDictionary *)toMap;
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithReceivedTimestamp:(NSNumber *)receivedTimestamp
    macAddress:(NSString *)macAddress
    source:(DTGMessageSource)source
    rssi:(nullable NSNumber *)rssi
    authType:(DTGAuthType)authType
    authDataPage:(NSNumber *)authDataPage
    authLastPageIndex:(NSNumber *)authLastPageIndex
    authLength:(NSNumber *)authLength
    authTimestamp:(NSNumber *)authTimestamp
    authData:(NSString *)authData;
@property(nonatomic, strong) NSNumber * receivedTimestamp;
@property(nonatomic, copy) NSString * macAddress;
@property(nonatomic, assign) DTGMessageSource source;
@property(nonatomic, strong, nullable) NSNumber * rssi;
@property(nonatomic, assign) DTGAuthType authType;
@property(nonatomic, strong) NSNumber * authDataPage;
@property(nonatomic, strong) NSNumber * authLastPageIndex;
@property(nonatomic, strong) NSNumber * authLength;
@property(nonatomic, strong) NSNumber * authTimestamp;
@property(nonatomic, copy) NSString * authData;
@end

@interface DTGSelfIdMessage : NSObject
- (NSDictionary *)toMap;
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithReceivedTimestamp:(NSNumber *)receivedTimestamp
    macAddress:(NSString *)macAddress
    source:(DTGMessageSource)source
    rssi:(nullable NSNumber *)rssi
    descriptionType:(NSNumber *)descriptionType
    operationDescription:(NSString *)operationDescription;
@property(nonatomic, strong) NSNumber * receivedTimestamp;
@property(nonatomic, copy) NSString * macAddress;
@property(nonatomic, assign) DTGMessageSource source;
@property(nonatomic, strong, nullable) NSNumber * rssi;
@property(nonatomic, strong) NSNumber * descriptionType;
@property(nonatomic, copy) NSString * operationDescription;
@end

@interface DTGSystemDataMessage : NSObject
- (NSDictionary *)toMap;
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithReceivedTimestamp:(NSNumber *)receivedTimestamp
    macAddress:(NSString *)macAddress
    source:(DTGMessageSource)source
    rssi:(nullable NSNumber *)rssi
    operatorLocationType:(DTGOperatorLocationType)operatorLocationType
    classificationType:(DTGClassificationType)classificationType
    operatorLatitude:(NSNumber *)operatorLatitude
    operatorLongitude:(NSNumber *)operatorLongitude
    areaCount:(NSNumber *)areaCount
    areaRadius:(NSNumber *)areaRadius
    areaCeiling:(NSNumber *)areaCeiling
    areaFloor:(NSNumber *)areaFloor
    category:(DTGAircraftCategory)category
    classValue:(DTGAircraftClass)classValue
    operatorAltitudeGeo:(NSNumber *)operatorAltitudeGeo;
@property(nonatomic, strong) NSNumber * receivedTimestamp;
@property(nonatomic, copy) NSString * macAddress;
@property(nonatomic, assign) DTGMessageSource source;
@property(nonatomic, strong, nullable) NSNumber * rssi;
@property(nonatomic, assign) DTGOperatorLocationType operatorLocationType;
@property(nonatomic, assign) DTGClassificationType classificationType;
@property(nonatomic, strong) NSNumber * operatorLatitude;
@property(nonatomic, strong) NSNumber * operatorLongitude;
@property(nonatomic, strong) NSNumber * areaCount;
@property(nonatomic, strong) NSNumber * areaRadius;
@property(nonatomic, strong) NSNumber * areaCeiling;
@property(nonatomic, strong) NSNumber * areaFloor;
@property(nonatomic, assign) DTGAircraftCategory category;
@property(nonatomic, assign) DTGAircraftClass classValue;
@property(nonatomic, strong) NSNumber * operatorAltitudeGeo;
@end

@interface DTGConnectionMessage : NSObject
- (NSDictionary *)toMap;
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithReceivedTimestamp:(NSNumber *)receivedTimestamp
    macAddress:(NSString *)macAddress
    source:(DTGMessageSource)source
    rssi:(nullable NSNumber *)rssi
    transportType:(NSString *)transportType
    lastSeen:(NSNumber *)lastSeen
    firstSeen:(NSNumber *)firstSeen
    msgDelta:(NSNumber *)msgDelta;
@property(nonatomic, strong) NSNumber * receivedTimestamp;
@property(nonatomic, copy) NSString * macAddress;
@property(nonatomic, assign) DTGMessageSource source;
@property(nonatomic, strong, nullable) NSNumber * rssi;
@property(nonatomic, copy) NSString * transportType;
@property(nonatomic, strong) NSNumber * lastSeen;
@property(nonatomic, strong) NSNumber * firstSeen;
@property(nonatomic, strong) NSNumber * msgDelta;
@end

/// The codec used by DTGApi.
NSObject<FlutterMessageCodec> *DTGApiGetCodec(void);

@protocol DTGApi
- (void)startScanBluetoothWithCompletion:(void(^)(FlutterError *_Nullable))completion;
- (void)startScanWifiWithCompletion:(void(^)(FlutterError *_Nullable))completion;
- (void)stopScanBluetoothWithCompletion:(void(^)(FlutterError *_Nullable))completion;
- (void)stopScanWifiWithCompletion:(void(^)(FlutterError *_Nullable))completion;
- (void)setBtScanPriorityPriority:(DTGScanPriority)priority completion:(void(^)(FlutterError *_Nullable))completion;
- (void)isScanningBluetoothWithCompletion:(void(^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
- (void)isScanningWifiWithCompletion:(void(^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
- (void)bluetoothStateWithCompletion:(void(^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
- (void)wifiStateWithCompletion:(void(^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
- (void)btExtendedSupportedWithCompletion:(void(^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
- (void)btMaxAdvDataLenWithCompletion:(void(^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
- (void)wifiNaNSupportedWithCompletion:(void(^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
@end

extern void DTGApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<DTGApi> *_Nullable api);

/// The codec used by DTGMessageApi.
NSObject<FlutterMessageCodec> *DTGMessageApiGetCodec(void);

@protocol DTGMessageApi
- (nullable NSNumber *)determineMessageTypePayload:(FlutterStandardTypedData *)payload offset:(NSNumber *)offset error:(FlutterError *_Nullable *_Nonnull)error;
- (nullable DTGBasicIdMessage *)fromBufferBasicPayload:(FlutterStandardTypedData *)payload offset:(NSNumber *)offset macAddress:(NSString *)macAddress error:(FlutterError *_Nullable *_Nonnull)error;
- (nullable DTGLocationMessage *)fromBufferLocationPayload:(FlutterStandardTypedData *)payload offset:(NSNumber *)offset macAddress:(NSString *)macAddress error:(FlutterError *_Nullable *_Nonnull)error;
- (nullable DTGOperatorIdMessage *)fromBufferOperatorIdPayload:(FlutterStandardTypedData *)payload offset:(NSNumber *)offset macAddress:(NSString *)macAddress error:(FlutterError *_Nullable *_Nonnull)error;
- (nullable DTGSelfIdMessage *)fromBufferSelfIdPayload:(FlutterStandardTypedData *)payload offset:(NSNumber *)offset macAddress:(NSString *)macAddress error:(FlutterError *_Nullable *_Nonnull)error;
- (nullable DTGAuthenticationMessage *)fromBufferAuthenticationPayload:(FlutterStandardTypedData *)payload offset:(NSNumber *)offset macAddress:(NSString *)macAddress error:(FlutterError *_Nullable *_Nonnull)error;
- (nullable DTGSystemDataMessage *)fromBufferSystemDataPayload:(FlutterStandardTypedData *)payload offset:(NSNumber *)offset macAddress:(NSString *)macAddress error:(FlutterError *_Nullable *_Nonnull)error;
- (nullable DTGConnectionMessage *)fromBufferConnectionPayload:(FlutterStandardTypedData *)payload offset:(NSNumber *)offset macAddress:(NSString *)macAddress error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void DTGMessageApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<DTGMessageApi> *_Nullable api);

NS_ASSUME_NONNULL_END
